<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SimpleNamespace | Bruno Messias</title>
    <link>/pt-br/tag/simplenamespace/</link>
      <atom:link href="/pt-br/tag/simplenamespace/index.xml" rel="self" type="application/rss+xml" />
    <description>SimpleNamespace</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>pt-br</language><copyright>Bruno Messias</copyright><lastBuildDate>Mon, 04 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hucd6a3d413e7b81060a1d462b35f64cf9_5018_512x512_fill_lanczos_center_2.png</url>
      <title>SimpleNamespace</title>
      <link>/pt-br/tag/simplenamespace/</link>
    </image>
    
    <item>
      <title>An introspective python decorator using  stack frames and the inspect module</title>
      <link>/pt-br/post/python_decorator_that_exposes_locals/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/pt-br/post/python_decorator_that_exposes_locals/</guid>
      <description>&lt;details 
class=&#34;toc-inpage d-print-none d-none d-sm-block d-md-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Lista de Conteúdos&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#gaining-a-deeper-understanding-about-the-execution-context-of-a-function&#34;&gt;Gaining a deeper understanding about the execution context of a function&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#the-fluent-python-book-example&#34;&gt;The Fluent Python Book example&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#current-issues-and-limitations&#34;&gt;Current issues and limitations&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#creating-an-introspective-code-with-the-inspect-module&#34;&gt;Creating an introspective code with the inspect module&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#a-decorator-that-validates-arguments-using-mathematical-notation&#34;&gt;A decorator that validates arguments using mathematical notation&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#going-back-to-the-fluent-python-example&#34;&gt;Going back to the Fluent python example&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#how-to-expose-the-locals-inside-of-a-decorator&#34;&gt;How to expose the locals() inside of a decorator?&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#call-stack-and-frames-in-python&#34;&gt;Call stack and frames in python&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#using-systrace-to-track-our-frames&#34;&gt;Using sys.trace to track our frames&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#lets-solve-our-problem&#34;&gt;Let&amp;rsquo;s solve our problem&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#conclusion-and-next-steps&#34;&gt;Conclusion and next steps&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#it-depends&#34;&gt;&amp;ldquo;&amp;hellip;it depends&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#the-next-step-we-dont-need-a-trace-we-can-do-better-using-ast-manipulation&#34;&gt;The next step: we don&amp;rsquo;t need a trace! We can do better using AST manipulation&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#simplenamespace-for-dictkey-instead-of-dictkey&#34;&gt;SimpleNamespace for dict.key instead of dict[&amp;ldquo;key]&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#want-to-know-more-about-call-stack--inspect-and-trace&#34;&gt;Want to know more about call stack , inspect and trace?&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.amazon.com.br/Fluent-Python-Luciano-Ramalho/dp/1491946008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fluent Python&lt;/a&gt; is the best resource to learn to use and love python. Some days ago I was reading a section of the chapter 7: &lt;em&gt;&amp;ldquo;Function Decorators and Closures&lt;/em&gt;&amp;rdquo;. This chapter has a lot of interesting and cool examples. Here I&amp;rsquo;ll discuss one of them and how I tried to put more shiny stuff in it.&lt;/p&gt;
&lt;h2 id=&#34;gaining-a-deeper-understanding-about-the-execution-context-of-a-function&#34;&gt;Gaining a deeper understanding about the execution context of a function&lt;/h2&gt;
&lt;h3 id=&#34;the-fluent-python-book-example&#34;&gt;The Fluent Python Book example&lt;/h3&gt;
&lt;p&gt;Ramalho’s book presents us with a &lt;code&gt;@clock&lt;/code&gt; decorator that can be used to decorate a method, measure the time it takes to execute, and print in a human-readable format the arguments and name of the method. The example is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time

DEFAULT_FMT = &#39;[{elapsed:0.8f}s] {name}({args}) -&amp;gt; {result}&#39;

def clock(fmt=DEFAULT_FMT):
    def decorate(func):
        def clocked(*_args):
            t0 = time.time()
            _result = func(*_args)
            elapsed = time.time() - t0
            name = func.__name__
            args = &#39;, &#39;.join(repr(arg) for arg in _args)
            result = repr(_result)
            log_string = fmt.format(**locals())
            # send to somewhere 
            # csv, ELK, etc
            print(log_string)
            return result
        return clocked
    return decorate

@clock(&#39;[{elapsed:0.8f}s] {name}({args})&#39;)
def snooze(seconds):
    time.sleep(seconds)
    return time.time()

for _ in range(3):
    snooze(.123)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0.12315798s] snooze(0.123)
[0.12315822s] snooze(0.123)
[0.12317085s] snooze(0.123)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&amp;rsquo;t understand something in the above code I recommend that you take some time searching and reading about each aspect. There are many cool things being used there, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repr&lt;/code&gt; which is a function that returns a string representation of an object.
&lt;ul&gt;
&lt;li&gt;This is essential because the &lt;code&gt;DEFAULT_FMT&lt;/code&gt; is a string, not a &lt;code&gt;f-string&lt;/code&gt;, we can&amp;rsquo;t just put a generic object to be printed in &lt;code&gt;DEFAULT_FMT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;log_string = fmt.format(**locals())&lt;/code&gt;: instead of creating a repetitive code like &lt;code&gt;fmt.format(**{&amp;quot;result&amp;quot;:result, &amp;quot;args&amp;quot;:args, ...})&lt;/code&gt; we can just use the &lt;code&gt;locals()&lt;/code&gt; which is a dictionary that contains all the local variables of the current scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I study something I always like to create a fresh problem with the stuff that I&amp;rsquo;ve learned and try to solve it. Sometimes there is no solution. But even if there is no solution, we still learn a lot trying to solve the problem.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve started by creating the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

@clock(&#39;[{elapsed:0.8f}s] {name}({args})&#39;)
def snooze_and_snore(seconds, snore_loud, min_prob_to_snore=0.4):
    time.sleep(seconds)
    to_snore = np.random.uniform() &amp;gt; min_prob_to_snore
    if to_snore:
        if snore_loud:
            pass
            # r.requets(wake_up_everyone)
        pass
    return time.time()

for _ in range(3):
    snooze_and_snore(.4, True, .1)
    snooze_and_snore(.4, False, .1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0.40229130s] snooze_and_snore(0.4, True, 0.1)
[0.40049720s] snooze_and_snore(0.4, False, 0.1)
[0.40058565s] snooze_and_snore(0.4, True, 0.1)
[0.40013075s] snooze_and_snore(0.4, False, 0.1)
[0.40052223s] snooze_and_snore(0.4, True, 0.1)
[0.40057564s] snooze_and_snore(0.4, False, 0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, what are the problems/issues/limitations that the above code showed  me?&lt;/p&gt;
&lt;h3 id=&#34;current-issues-and-limitations&#34;&gt;Current issues and limitations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We don&amp;rsquo;t have information about the names of the arguments passed to the method.
&lt;ul&gt;
&lt;li&gt;If the list of arguments is long, trying to understand what is happening becomes a hard task. Because we are increasing the amount of stuff that we must  keep in our mind. We are increasing the &lt;strong&gt;cognitive load&lt;/strong&gt; in the terms presented in the excelsior book: 
&lt;a href=&#34;https://linghao.io/notes/a-philosophy-of-software-design&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Philosophy of Software Design&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A person who is not familiar with the codebase cannot understand what is happening by analyzing the outputs of the decorator. If these outputs are being stored in the ELK stack, this will be unproductive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We have the &lt;code&gt;locals()&lt;/code&gt; information from the decorator which is fed by the result of the decorated method. However, we can&amp;rsquo;t get any information about the &lt;code&gt;locals()&lt;/code&gt; of the decorated method. Why is this bad?
&lt;ul&gt;
&lt;li&gt;The final internal state of the method is commonly used to understand the execution of a method.&lt;/li&gt;
&lt;li&gt;Sometimes a method depends on random variables defined in the local context. Thus, the same set of arguments can give different executions. Until now, we don&amp;rsquo;t have a way to get the &lt;code&gt;locals()&lt;/code&gt; of the decorated method. For example, in the &lt;code&gt;snooze_and_snore&lt;/code&gt; we can&amp;rsquo;t know if the person snored or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will attack the first issue using the inspect module. As I&amp;rsquo;ll show you, we can do cool things with this module.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you know about &lt;code&gt;sys.trace&lt;/code&gt;, &lt;code&gt;call stack&lt;/code&gt; and &lt;code&gt;inspect.signatures&lt;/code&gt; I recommend
you go directly to the section &lt;a href=&#34;#lets_solve_our_problem&#34;&gt;Let&amp;rsquo;s solve our problem&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;creating-an-introspective-code-with-the-inspect-module&#34;&gt;Creating an introspective code with the inspect module&lt;/h2&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://docs.python.org/3/library/inspect.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;inspect&lt;/a&gt; module is a Python standard library that provides several tools to help you to introspect and consequently learn about live objects like functions, modules, classes, instances, frame objects (I&amp;rsquo;ll talk about frames later in this post), etc. Well, what can you do with this? Really, a lot of things. You can use it to  automatically create  documentation, parse the docstrings, manipulate the AST, etc.&lt;/p&gt;
&lt;h3 id=&#34;a-decorator-that-validates-arguments-using-mathematical-notation&#34;&gt;A decorator that validates arguments using mathematical notation&lt;/h3&gt;
&lt;p&gt;In the last years, we have seen the development of the &lt;code&gt;typing&lt;/code&gt; module and the &lt;code&gt;mypy&lt;/code&gt; static analysis tool for python. This module and tool can be very useful sometimes. However, it is still doesn&amp;rsquo;t provide some features that are essential for proper validation. But at least in my experience creating code for my Ph.D., I usually don&amp;rsquo;t need so much sophisticated type theory and validation to be able to write a good code for a mathematical modeling tool. Most of the mathematical validation that I need is just checking if an argument still satisfies some constraints or lives in a proper subspace. If not, I need to raise an exception or perform some kind of regularization.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a decorator that will validate arguments using simple mathematical notation.&lt;/p&gt;
&lt;p&gt;We will create a dictionary that will contain the annotation as a key and the value will be a human-readable
description of the annotation and a method responsible for check if everything is right.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import inspect

MATH_SPACES = {
    &amp;quot;\in R&amp;quot;: {&amp;quot;name&amp;quot; : &amp;quot;real space&amp;quot;, &amp;quot;validator&amp;quot;: lambda x: isinstance(x, (int, float))},
    &amp;quot;\in R_+&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;space of real numbers greater than zero&amp;quot;, &amp;quot;validator&amp;quot;: lambda x: isinstance(x, (int, float)) and x &amp;gt; 0},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use the &lt;code&gt;inspect.signature&lt;/code&gt; to get the annotations of each argument of the decorated method.
For example, if the decorated method is &lt;code&gt;def foo(a: &#39;\in R&#39;, b)&lt;/code&gt; the &lt;code&gt;inspect.signature(foo)&lt;/code&gt; will return an object which we can use to extract an ordered dictionary with the arguments and the annotations. Like this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def foo(a: &amp;quot;\in R&amp;quot;, b, c:int, d= 2):
    pass
for k, v in inspect.signature(foo).parameters.items():
    print(k, v, type(v._annotation), v.default)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a a: &#39;\\in R&#39; &amp;lt;class &#39;str&#39;&amp;gt; &amp;lt;class &#39;inspect._empty&#39;&amp;gt;
b b &amp;lt;class &#39;type&#39;&amp;gt; &amp;lt;class &#39;inspect._empty&#39;&amp;gt;
c c: int &amp;lt;class &#39;type&#39;&amp;gt; &amp;lt;class &#39;inspect._empty&#39;&amp;gt;
d d=2 &amp;lt;class &#39;type&#39;&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s create our decorator. It should be really simple. Just check if we should verify the argument and if so, check if the value respects the annotated mathematical space.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def math_validator():
    def decorate(func):
        def decorated(*_args):
            sig = inspect.signature(func)
            # sig parameters is an ordered dict
            for i, (k, v) in enumerate(sig.parameters.items()):
                annotation = v._annotation
                if not isinstance(annotation, str):
                    continue
                if not annotation in MATH_SPACES:
                    print(f&amp;quot;{annotation} is not implemented in Math Spaces&amp;quot;)
                    continue # skip if we didn&#39;t implement this space validation

                if not MATH_SPACES[annotation][&amp;quot;validator&amp;quot;](_args[i]):
                    raise ValueError(f&amp;quot;{k} doesn&#39;t belong to the {MATH_SPACES[annotation][&#39;name&#39;]}&amp;quot;)
            result = func(*_args)
            print(f&amp;quot;{func.__name__}({_args}) -&amp;gt; {result}&amp;quot;)
            return result 
        return decorated
    return decorate

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@math_validator()
def simple_method(x: &amp;quot;\in R&amp;quot;, y: &amp;quot;\in R_+&amp;quot;, z: float = 2) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Simple method to add two numbers together and 
    divide by the last number

    Args:
        x: The first number to add.
        y: The second number to add.
        z: it is a float number that will be the power of the result.
            This will not be checked for math spaces.
    Returns:
        float: result
    
    &amp;quot;&amp;quot;&amp;quot;
    result = (x+y)/y
    return result**z

simple_method(1, 2)
simple_method(1, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;simple_method((1, 2)) -&amp;gt; 1.5
---&amp;gt; 19 simple_method(1, 0)
...
&amp;lt;locals&amp;gt;.decorate.&amp;lt;locals&amp;gt;.decorated(*_args)
     11         continue
     13     if not MATH_SPACES[annotation][&amp;quot;validator&amp;quot;](_args[i]):
---&amp;gt; 14         raise ValueError(f&amp;quot;{k} doesn&#39;t belong to the {MATH_SPACES[annotation][&#39;name&#39;]}&amp;quot;)
     15 result = func(*_args)
     16 print(f&amp;quot;{func.__name__}({_args}) -&amp;gt; {result}&amp;quot;)

ValueError: y doesn&#39;t belong to the space of real numbers greater than zero
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our decorator is quite simple but does the job. You can go deeper into this and use a more sophisticated mathematical notation, printing using latex, etc. But now, let&amp;rsquo;s go back to the Python Fluent example because the &lt;code&gt;inspect.signature&lt;/code&gt; already provides us with a way to solve the first limitation!&lt;/p&gt;
&lt;h3 id=&#34;going-back-to-the-fluent-python-example&#34;&gt;Going back to the Fluent python example&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s remember one thing that I&amp;rsquo;ve pointed out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A person who is not familiar with the code base will not be able to understand what is happening just by analyzing the outputs of the decorator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;rsquo;s obvious that we can overcome this issue by using the &lt;code&gt;inspect&lt;/code&gt; module. Let&amp;rsquo;s create a more elaborated example using monkeys and a zookeeper that must record and report the information about how the life of the monkeys are going.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;NUM_MONKEYS = 20
def feed_monkeys(n_bananas, n_apples=0): 
    monkeys = {
        f&amp;quot;monkey_{i}&amp;quot;: {&amp;quot;bananas&amp;quot;: 0, &amp;quot;apples&amp;quot;: 0}
        for i in range(NUM_MONKEYS)
    }
    while n_bananas &amp;gt; 0 and n_apples &amp;gt; 0:
        if np.random.uniform() &amp;lt; 0.4:
            continue
        monkey = monkey[np.random.choice(list(monkeys.keys()))]
        if n_bananas &amp;gt; 0:
            monkey[&amp;quot;bananas&amp;quot;] += 1
            n_bananas -= 1
        if n_apples &amp;gt; 0:
            monkey[&amp;quot;apples&amp;quot;] += 1
            n_apples -= 1
        if n_apples == 0 and n_bananas == 0:
            break
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My solution is the &lt;code&gt;@report&lt;/code&gt; decorator presented below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def report(fmt=DEFAULT_FMT):
    def decorate(func):
        def  decorated(*_args):
            sig = inspect.signature(func)
            named_args = {}
            num_args = len(_args)
            for i, (k, v) in enumerate(sig.parameters.items()):
                if i &amp;lt; num_args:
                    named_args[k] = repr(_args[i])
                else:
                    named_args[k] = repr(v.default)
            t0 = time.time()
            _result = func(*_args)
            elapsed = time.time() - t0
            name = func.__name__
            result = repr(_result)
            args_dict = {
            **locals(),
            **named_args}
            del args_dict[&#39;_args&#39;]
            print(fmt.format(**args_dict))
            # store the information in some place
            return result
        return decorated 
    return decorate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is important here are the following statements:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sig = inspect.signature(func)
named_args = {}
num_args = len(_args)
for i, (k, v) in enumerate(sig.parameters.items()):
    if i &amp;lt; num_args:
        named_args[k] = repr(_args[i])
    else:
        named_args[k] = repr(v.default)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are iterating over the signature parameters and checking if it have passed the value to &lt;code&gt;func&lt;/code&gt;. If not, we extract the default value from the signature.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;@report&lt;/code&gt; decorator in the &lt;code&gt;feed_monkeys&lt;/code&gt; we have this output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;NUM_MONKEYS = 20
@report(&#39;The zookeeper feeds the monkeys with {n_bananas} bananas and {n_apples} apples. Time to feed: {elapsed:0.4f}s&#39;)
def feed_monkeys(n_bananas, n_apples=0): 
    monkeys = {
        f&amp;quot;monkey_{i}&amp;quot;: {&amp;quot;bananas&amp;quot;: 0, &amp;quot;apples&amp;quot;: 0}
        for i in range(NUM_MONKEYS)
    }
    while n_bananas &amp;gt; 0 and n_apples &amp;gt; 0:
        if np.random.uniform() &amp;lt; 0.4:
            continue
        monkey = monkeys[np.random.choice(list(monkeys.keys()))]

        if n_bananas &amp;gt; 0:
            monkey[&amp;quot;bananas&amp;quot;] += 1
            n_bananas -= 1
        if n_apples &amp;gt; 0:
            monkey[&amp;quot;apples&amp;quot;] += 1
            n_apples -= 1
        if n_apples == 0 and n_bananas == 0:
            break

for _ in range(3):
    feed_monkeys(np.random.randint(10, 100))
    feed_monkeys(np.random.randint(10, 100), 10)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The zookeeper feeds the monkeys with 69 bananas and 0 apples. Time to feed: 0.0000s
The zookeeper feeds the monkeys with 92 bananas and 10 apples. Time to feed: 0.0011s
The zookeeper feeds the monkeys with 58 bananas and 0 apples. Time to feed: 0.0000s
The zookeeper feeds the monkeys with 53 bananas and 10 apples. Time to feed: 0.0048s
The zookeeper feeds the monkeys with 42 bananas and 0 apples. Time to feed: 0.0000s
The zookeeper feeds the monkeys with 51 bananas and 10 apples. Time to feed: 0.0025s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First issue solved! But our decorator is still not useful to the zookeeper and managers. We can’t know how good any monkey is doing or if there is any monkey that eats too much. You could already know that somehow we must have a way to access the monkeys&#39; dictionary inside our &lt;code&gt;def decorated&lt;/code&gt; method. Unfortunately, this is not a trivial task in python because it lacks namespaces decorators. But we also can overcome this with a little trick using a trace tool.&lt;/p&gt;
&lt;h2 id=&#34;how-to-expose-the-locals-inside-of-a-decorator&#34;&gt;How to expose the locals() inside of a decorator?&lt;/h2&gt;
&lt;p&gt;Now we just need to access the local variables of the decorated method. Let&amp;rsquo;s think more deeply about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After the execution of the decorated method, all the information about the local variables is lost. Fortunately, we don&amp;rsquo;t want irrelevant information occupying our system memory.&lt;/li&gt;
&lt;li&gt;The decorator will call the decorated method and will receive the return value. Thus, &lt;strong&gt;there is no way to extract the local variables because now there are no more local variables!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to solve it? Well,  think first about where the local variables are been stored before being erased.&lt;/p&gt;
&lt;h3 id=&#34;call-stack-and-frames-in-python&#34;&gt;Call stack and frames in python&lt;/h3&gt;
&lt;p&gt;If you came from a non-CS background, maybe you don&amp;rsquo;t know about an important concept called  the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Call_stack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;call stack&lt;/strong&gt;&lt;/a&gt;. A call stack is a data structure that stores information related to living things in our program.&lt;/p&gt;
&lt;p&gt;If you call a function in python, a new block of information (&lt;strong&gt;frame&lt;/strong&gt;) is pushed to the top of the call stack. After the function returns the value, this block of information is popped off the call stack. This comprehension can give insights into how to do things in python and how to create good or strange behaviors.&lt;/p&gt;
&lt;p&gt;Well, you can think. If the elements of the call stack are always added on the top if a function (inner) is called by another function (outer) &lt;strong&gt;can I access the values of the local variables from the outer function inside of the inner? Yes, you can!&lt;/strong&gt; Obviously, this is not always a good idea but it&amp;rsquo;s good to understand this concept. Because this approach can be  useful to deal with  rigid frameworks like Django.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%writefile test_stack.py
import inspect

N_BANANAS = 12

def outer_call(n_bananas):
    var_inside_outer_call = 2
    n_bananas += 1
    inner_call(n_bananas)

def inner_call(n_bananas):
    var_inside_inner_call = {&amp;quot;monkey&amp;quot;: 0}
    frame_infos = inspect.stack()
    n_frames = len(frame_infos)
    frames_var_values = {
        f.function: [(k, v) for k, v in f.frame.f_locals.items()] for f in frame_infos
    }
    
    for i, (function, frame_local) in enumerate(frames_var_values.items()):
        print(f&#39;\n\t {function} stack position: {n_frames - i}&#39;)
        for var_name, value in frame_local:
            print(f&#39;\t\t Name: {var_name:25s}Type: {type(value)}&#39;)
            if var_name in (&#39;n_bananas&#39;, &#39;N_BANANAS&#39;, &#39;var_inside_outer_call&#39;):
                print(f&#39;\t\t\t Value: {value}&#39;)

print(&amp;quot;\n Before outer_call() call&amp;quot;)
outer_call(N_BANANAS)

print(&amp;quot;\n After outer_call() call&amp;quot;)

frames = [
        [(k, v) for k, v in f.frame.f_locals.items()] 
        for f in inspect.stack()
]
for frame_local in frames:
    for var_name, value in frame_local:
        print(f&#39;\t\t Name: {var_name:25s}Type: {type(value)}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Overwriting test_stack.py
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!python test_stack.py
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; Before outer_call() call

	 inner_call stack position: 3
		 Name: n_bananas                Type: &amp;lt;class &#39;int&#39;&amp;gt;
			 Value: 13
		 Name: var_inside_inner_call    Type: &amp;lt;class &#39;dict&#39;&amp;gt;
		 Name: frame_infos              Type: &amp;lt;class &#39;list&#39;&amp;gt;
		 Name: n_frames                 Type: &amp;lt;class &#39;int&#39;&amp;gt;

	 outer_call stack position: 2
		 Name: n_bananas                Type: &amp;lt;class &#39;int&#39;&amp;gt;
			 Value: 13
		 Name: var_inside_outer_call    Type: &amp;lt;class &#39;int&#39;&amp;gt;
			 Value: 2

	 &amp;lt;module&amp;gt; stack position: 1
		 Name: __name__                 Type: &amp;lt;class &#39;str&#39;&amp;gt;
		 Name: __doc__                  Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: __package__              Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: __loader__               Type: &amp;lt;class &#39;_frozen_importlib_external.SourceFileLoader&#39;&amp;gt;
		 Name: __spec__                 Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: __annotations__          Type: &amp;lt;class &#39;dict&#39;&amp;gt;
		 Name: __builtins__             Type: &amp;lt;class &#39;module&#39;&amp;gt;
		 Name: __file__                 Type: &amp;lt;class &#39;str&#39;&amp;gt;
		 Name: __cached__               Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: inspect                  Type: &amp;lt;class &#39;module&#39;&amp;gt;
		 Name: N_BANANAS                Type: &amp;lt;class &#39;int&#39;&amp;gt;
			 Value: 12
		 Name: outer_call               Type: &amp;lt;class &#39;function&#39;&amp;gt;
		 Name: inner_call               Type: &amp;lt;class &#39;function&#39;&amp;gt;

 After outer_call() call
		 Name: __name__                 Type: &amp;lt;class &#39;str&#39;&amp;gt;
		 Name: __doc__                  Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: __package__              Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: __loader__               Type: &amp;lt;class &#39;_frozen_importlib_external.SourceFileLoader&#39;&amp;gt;
		 Name: __spec__                 Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: __annotations__          Type: &amp;lt;class &#39;dict&#39;&amp;gt;
		 Name: __builtins__             Type: &amp;lt;class &#39;module&#39;&amp;gt;
		 Name: __file__                 Type: &amp;lt;class &#39;str&#39;&amp;gt;
		 Name: __cached__               Type: &amp;lt;class &#39;NoneType&#39;&amp;gt;
		 Name: inspect                  Type: &amp;lt;class &#39;module&#39;&amp;gt;
		 Name: N_BANANAS                Type: &amp;lt;class &#39;int&#39;&amp;gt;
		 Name: outer_call               Type: &amp;lt;class &#39;function&#39;&amp;gt;
		 Name: inner_call               Type: &amp;lt;class &#39;function&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, draw your attention here&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;outer_call stack position: 2
		 Name: n_bananas                Type: &amp;lt;class &#39;int&#39;&amp;gt;
			 Value: 13
		 Name: var_inside_outer_call    Type: &amp;lt;class &#39;int&#39;&amp;gt;
			 Value: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Even if we don&amp;rsquo;t pass a  variable as an argument to the &lt;code&gt;inner_call&lt;/code&gt; function, this variable can be accessed because still lives in the call stack!&lt;/strong&gt; As I’ve told you, after the execution of &lt;code&gt;outer_call&lt;/code&gt; the call stack doesn&amp;rsquo;t have any information about what happened inside our functions. This discussion will help us to understand the limitations of our solution. Because &lt;strong&gt;our solution is just to watch the call stack and keep the frame before being popped off!&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;using-systrace-to-track-our-frames&#34;&gt;Using sys.trace to track our frames&lt;/h3&gt;
&lt;p&gt;Some time ago I&amp;rsquo;ve talked about how to dissect a  process using &lt;code&gt;lsof&lt;/code&gt; and &lt;code&gt;strace&lt;/code&gt;: 
&lt;a href=&#34;https://medium.com/@devmessias/dissecting-process-and-failures-in-linux-with-lsof-and-strace-cases-for-mlops-d7755b2ce6ca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dissecting processes and failures in Linux with lsof and strace&lt;/a&gt;. The &lt;code&gt;strace&lt;/code&gt; is a tracing tool that intercepts and records in someplace any system call made by a process. Python has a built-in tool to do this kind of stuff. Thus, let&amp;rsquo;s use it to track our frames.&lt;/p&gt;
&lt;h3 id=&#34;lets-solve-our-problem&#34;&gt;Let&amp;rsquo;s solve our problem&lt;/h3&gt;
&lt;p&gt;We will ask our code to monitor any call made with the decorated function. To do so, we will create a new function that will do this and release the trace after the execution of the decorated function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys

def call_and_extract_frame(func, *args, **kwargs):
    frame_var = None
    trace = sys.gettrace()
    def update_frame_var(stack_frame, event_name, arg_frame):
        &amp;quot;&amp;quot;&amp;quot;
        Args:
            stack_frame: (frame)
                The current stack frame.
            event_name: (str)
                The name of the event that triggered the call. 
                Can be &#39;call&#39;, &#39;line&#39;, &#39;return&#39; and &#39;exception&#39;.
            arg_frame: 
                Depends on the event. Can be a None type
        &amp;quot;&amp;quot;&amp;quot;
        nonlocal frame_var # nonlocal is a keyword which allows us to change the variable in the outer scope
        if event_name != &#39;call&#39;:
            return trace
        frame_var = stack_frame
        sys.settrace(trace)
        return trace
    sys.settrace(update_frame_var)
    try:
        func_result = func(*args, **kwargs)
    finally:
        sys.settrace(trace)
    return frame_var, func_result


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to use this trick, we just need to call the above function in our &lt;code&gt;@report&lt;/code&gt; decorator. Like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def report(formater):
    def decorate(func):
        def decorated(*_args):
            sig = inspect.signature(func)
            named_args = {}
            num_args = len(_args)
            for i, (k, v) in enumerate(sig.parameters.items()):
                if i &amp;lt; num_args:
                    named_args[k] = repr(_args[i])
                else:
                    named_args[k] = repr(v.default)
            
            ### Our modifications
            frame_func, _result = call_and_extract_frame(func, *_args)
            name = func.__name__
            result = repr(_result)
            args_dict = {
                **named_args, 
                **locals(),
                **frame_func.f_locals,
            }
            ###

            print(formater.format(**args_dict))
            # do other stuff here
            return _result 
        return decorated
    return decorate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s see the results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@report(&#39; Monkey {gluttonous_monkey} ate too much bananas.  Num monkeys {num_monkeys}&#39;)
def feed_monkeys(n_bananas): 
    num_monkeys = 3
    monkeys = {
        f&amp;quot;monkey_{i}&amp;quot;: {&amp;quot;bananas&amp;quot;: 0}
        for i in range(num_monkeys)
    }
    while n_bananas &amp;gt; 0:
        if np.random.uniform() &amp;lt; 0.4:
            continue
        monkey = monkeys[np.random.choice(list(monkeys.keys()))]
        if n_bananas &amp;gt; 0:
            monkey[&amp;quot;bananas&amp;quot;] += 1
            n_bananas -= 1
    gluttonous_monkey = max(monkeys, key=lambda k: monkeys[k][&amp;quot;bananas&amp;quot;]) 

for _ in range(3):
    feed_monkeys(np.random.randint(10, 100))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; The monkey monkey_0 eat too much bananas.  Num monkeys 3
 The monkey monkey_1 eat too much bananas.  Num monkeys 3
 The monkey monkey_2 eat too much bananas.  Num monkeys 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;conclusion-and-next-steps&#34;&gt;Conclusion and next steps&lt;/h2&gt;
&lt;h3 id=&#34;it-depends&#34;&gt;&amp;ldquo;&amp;hellip;it depends&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Nice! It worked. But should you use it?&lt;/p&gt;







  
  















&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/pt-br/post/python_decorator_that_exposes_locals/depends_hue4832d1f9bd8c3212ee44b9859787ce4_80720_0x400_resize_q90_lanczos.jpg&#34; &gt;


  &lt;img src=&#34;/pt-br/post/python_decorator_that_exposes_locals/depends_hue4832d1f9bd8c3212ee44b9859787ce4_80720_0x400_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;  height=&#34;400px&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;We have drawbacks in our approach:
&lt;ul&gt;
&lt;li&gt;a tracing always creates a cost. Thus, is expected that we will reduce the performance of our system. If you use this just for debugging purposes, it&amp;rsquo;s ok.&lt;/li&gt;
&lt;li&gt;can have conflicts with other tools and libs that also trying to use the trace tool&lt;/li&gt;
&lt;li&gt;it seems dirty!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-next-step-we-dont-need-a-trace-we-can-do-better-using-ast-manipulation&#34;&gt;The next step: we don&amp;rsquo;t need a trace! We can do better using AST manipulation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Using the inspect module to get the argument names it&amp;rsquo;s ok but I&amp;rsquo;ve told you the trace tool can be problematic.  But we can replace the trace with another approach. Although, it&amp;rsquo;s more conceptually complex don&amp;rsquo;t require  dirty tricks and I believe it&amp;rsquo;s far more beautiful. &lt;strong&gt;The next post it&amp;rsquo;s about this!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simplenamespace-for-dictkey-instead-of-dictkey&#34;&gt;SimpleNamespace for dict.key instead of dict[&amp;ldquo;key]&lt;/h3&gt;
&lt;p&gt;We have a minor issue and point of improvement. If you&amp;rsquo;re an cautious developer, probably you notice a flaw here&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;args_dict = {
    **named_args, 
    **locals(),
    **frame_func.f_locals,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if any of the dicts have common keys, one of them will overwrite the other. This is not what we want. You can use a simple solution like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;args_dict = {
    &amp;quot;args&amp;quot;: **named_args, 
    **locals(),
    &amp;quot;func_locals&amp;quot;: **frame_func.f_locals,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this is still annoying because we can do this with a format string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@report(fmt=&amp;quot;{args[&#39;n_bananas&#39;]} ...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, how to solve it? Just use a SimpleNamespace to construct an object!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from types import SimpleNamespace


def report(formater):
    def decorate(func):
        def decorated(*_args):
            sig = inspect.signature(func)
            named_args = {}
            num_args = len(_args)
            for i, (k, v) in enumerate(sig.parameters.items()):
                if i &amp;lt; num_args:
                    named_args[k] = repr(_args[i])
                else:
                    named_args[k] = repr(v.default)
            
            ### Our modifications
            frame_func, _result = call_and_extract_frame(func, *_args)
            name = func.__name__
            result = repr(_result)
            args_dict = {
                &amp;quot;args&amp;quot;: SimpleNamespace(**named_args), 
                &amp;quot;args_repr&amp;quot;: repr(SimpleNamespace(**named_args)),
                **locals(),
                **frame_func.f_locals,
            }
            ###

            print(formater.format(**args_dict))
            # do other stuff here
            return _result 
        return decorated
    return decorate


@report(
    &amp;quot;&amp;quot;.join((
        &#39;The zookeeper feeds the monkeys with {args.n_bananas},&#39;, 
        &#39;bananas. We loost {n_bananas} bananas. Args {args_repr}&#39;
    ))
)
def feed_monkeys(n_bananas): 
    num_monkeys = 3
    monkeys = {
        f&amp;quot;monkey_{i}&amp;quot;: {&amp;quot;bananas&amp;quot;: 0}
        for i in range(num_monkeys)
    }
    while n_bananas &amp;gt; 0:
        if np.random.uniform() &amp;gt; .8:
            # &amp;quot;bananas rotted . Monkeys will not eat any banana any more&amp;quot;)
            break
        if np.random.uniform() &amp;lt; 0.4:
            continue
        monkey = monkeys[np.random.choice(list(monkeys.keys()))]
        if n_bananas &amp;gt; 0:
            monkey[&amp;quot;bananas&amp;quot;] += 1
            n_bananas -= 1
    gluttonous_monkey = max(monkeys, key=lambda k: monkeys[k][&amp;quot;bananas&amp;quot;]) 

for _ in range(3):
    feed_monkeys(np.random.randint(10, 100))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The zookeeper feeds the monkeys with 15,bananas. We loost 15 bananas. Args namespace(n_bananas=&#39;15&#39;)
The zookeeper feeds the monkeys with 80,bananas. We loost 77 bananas. Args namespace(n_bananas=&#39;80&#39;)
The zookeeper feeds the monkeys with 95,bananas. We loost 92 bananas. Args namespace(n_bananas=&#39;95&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;want-to-know-more-about-call-stack--inspect-and-trace&#34;&gt;Want to know more about call stack , inspect and trace?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Call stack and frames: 
&lt;a href=&#34;https://www.linkedin.com/in/reza-bagheri-71882a76/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reza Bagheri&lt;/a&gt; explained 
&lt;a href=&#34;https://reza-bagheri79.medium.com/python-stack-frames-and-tail-call-optimization-4d0ea55b0542&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; how to add a tail-call optimization in python using python stack frames.&lt;/li&gt;
&lt;li&gt;Fluent Python book by Luciano Ramalho&lt;/li&gt;
&lt;li&gt;Python documentation: 
&lt;a href=&#34;https://docs.python.org/3/library/traceback.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tracebak&lt;/a&gt;, 
&lt;a href=&#34;https://docs.python.org/3/library/inspect.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;inspect and stack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/4214936/how-can-i-get-the-values-of-the-locals-of-a-function-after-it-has-been-executed/4249347#4249347&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stackoverflow discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
