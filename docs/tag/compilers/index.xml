<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compilers | Bruno Messias</title>
    <link>/tag/compilers/</link>
      <atom:link href="/tag/compilers/index.xml" rel="self" type="application/rss+xml" />
    <description>compilers</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en</language><copyright>Bruno Messias</copyright><lastBuildDate>Fri, 08 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hucd6a3d413e7b81060a1d462b35f64cf9_5018_512x512_fill_lanczos_center_2.png</url>
      <title>compilers</title>
      <link>/tag/compilers/</link>
    </image>
    
    <item>
      <title>Going meta with python: manipulating ASTs to create an introspective decorator at runtime [draft]</title>
      <link>/post/python_ast_and_decorators_with_locals/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/python_ast_and_decorators_with_locals/</guid>
      <description>&lt;details 
class=&#34;toc-inpage d-print-none d-none d-sm-block d-md-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#intro-our-previous-problem&#34;&gt;Intro: our previous problem&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#asts-what-they-are&#34;&gt;ASTs: What they are?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#python-interpreted-or-compiled&#34;&gt;Python: interpreted or compiled?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#extracting-asts-and-interpreting-them&#34;&gt;Extracting ASTs and interpreting them&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#how-can-i-be-efficient-in-metaprogramming&#34;&gt;How can I be efficient in metaprogramming?&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#the-6-simple-steps&#34;&gt;The 6 simple steps&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#creating-our-metaprogramming-function&#34;&gt;Creating our metaprogramming function&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#first-six-steps-interaction&#34;&gt;First six-steps interaction&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#the-nodetransformer-class&#34;&gt;The NodeTransformer class&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#the-second-six-steps-interaction&#34;&gt;The second six-steps interaction&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#creating-a-new-function-at-runtime&#34;&gt;Creating a new function at runtime&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#integrating-the-ast-manipulation-with-a-decorator&#34;&gt;Integrating the AST manipulation with a decorator&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;h2 id=&#34;intro-our-previous-problem&#34;&gt;Intro: our previous problem&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t be afraid by the names on the title. Although they can seem scary or strange probably you already have been in touch with tools that work with this kind of stuff. For example, pytest and numba.&lt;/p&gt;
&lt;p&gt;In the previous post, I talked about python frames and inspection module. I&amp;rsquo;ve started showing how we can use the &lt;code&gt;inspect.signature&lt;/code&gt; to construct a decorator that validates arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@math_validator()
def simple_method(x: &amp;quot;\in R&amp;quot;, y: &amp;quot;\in R_+&amp;quot;, z: float = 2) -&amp;gt; float:
    ...
simple_method(1, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;simple_method((1, 2)) -&amp;gt; 1.5
---&amp;gt; 19 simple_method(1, 0)
...
&amp;lt;locals&amp;gt;.decorate.&amp;lt;locals&amp;gt;.decorated(*_args)
     11         continue
     13     if not MATH_SPACES[annotation][&amp;quot;validator&amp;quot;](_args[i]):
---&amp;gt; 14         raise ValueError(f&amp;quot;{k} doesn&#39;t belong to the {MATH_SPACES[annotation][&#39;name&#39;]}&amp;quot;)
     15 result = func(*_args)
     16 print(f&amp;quot;{func.__name__}({_args}) -&amp;gt; {result}&amp;quot;)

ValueError: y doesn&#39;t belong to the space of real numbers greater than zero
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And after that, I&amp;rsquo;ve combined the &lt;code&gt;inspect.singature&lt;/code&gt;+&lt;code&gt;sys.trace&lt;/code&gt;+&lt;code&gt;locals&lt;/code&gt; to construct a decorator that exposes the local variables of a decorated function. All this stuff allows us to do cool things like creating a generic report decorator that have access to the local variables of the decorated method&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@report(&#39;{arg.n_bananas} Monkey {gluttonous_monkey} ate too much bananas.  Num monkeys {num_monkeys}&#39;)
def feed_monkeys(n_bananas): 
    num_monkeys = 3
    monkeys = {
        f&amp;quot;monkey_{i}&amp;quot;: {&amp;quot;bananas&amp;quot;: 0}
        for i in range(num_monkeys)
    }
    while n_bananas &amp;gt; 0:
        if np.random.uniform() &amp;lt; 0.4:
            continue
        monkey = monkeys[np.random.choice(list(monkeys.keys()))]
        if n_bananas &amp;gt; 0:
            monkey[&amp;quot;bananas&amp;quot;] += 1
            n_bananas -= 1
    gluttonous_monkey = max(monkeys, key=lambda k: monkeys[k][&amp;quot;bananas&amp;quot;]) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These two examples can be found in real application scenarios. But at the end of my previous post I&amp;rsquo;ve told you some issues regarding the use of &lt;code&gt;sys.trace&lt;/code&gt;. I&amp;rsquo;ll put the code here of the previous solution:
&lt;div class=&#34;spoiler &#34; &gt;
  &lt;p&gt;
    &lt;a class=&#34;btn btn-primary&#34; data-toggle=&#34;collapse&#34; href=&#34;#spoiler-1&#34; role=&#34;button&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;spoiler-1&#34;&gt;
      Click here to see the solution
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;div class=&#34;collapse card &#34; id=&#34;spoiler-1&#34;&gt;
    &lt;div class=&#34;card-body&#34;&gt;
      &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
import inspect
from types import SimpleNamespace


def call_and_extract_frame(func, *args, **kwargs):
    frame_var = None
    trace = sys.gettrace()
    def update_frame_var(stack_frame, event_name, arg_frame):
        &amp;quot;&amp;quot;&amp;quot;
        Args:
            stack_frame: (frame)
                The current stack frame.
            event_name: (str)
                The name of the event that triggered the call. 
                Can be &#39;call&#39;, &#39;line&#39;, &#39;return&#39; and &#39;exception&#39;.
            arg_frame: 
                Depends on the event. Can be a None type
        &amp;quot;&amp;quot;&amp;quot;
        nonlocal frame_var # nonlocal is a keyword which allows us to modify the outisde scope variable
        if event_name != &#39;call&#39;:
            return trace
        frame_var = stack_frame
        sys.settrace(trace)
        return trace
    sys.settrace(update_frame_var)
    try:
        func_result = func(*args, **kwargs)
    finally:
        sys.settrace(trace)
    return frame_var, func_result
def report(formater):
    def decorate(func):
        def decorated(*_args):
            sig = inspect.signature(func)
            named_args = {}
            num_args = len(_args)
            for i, (k, v) in enumerate(sig.parameters.items()):
                if i &amp;lt; num_args:
                    named_args[k] = repr(_args[i])
                else:
                    named_args[k] = repr(v.default)
            frame_func, _result = call_and_extract_frame(func, *_args)
            name = func.__name__
            result = repr(_result)
            
            args_dict = {
                &amp;quot;args&amp;quot;: SimpleNamespace(**named_args), 
                &amp;quot;args_repr&amp;quot;: repr(SimpleNamespace(**named_args)),
                **locals(),
                **frame_func.f_locals,
            }
            print(formater.format(**args_dict))
            # do other stuff here
            return _result 
        return decorated
    return decorate
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;What are the problems with this solution?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A tracing always creates a cost. Thus, is expected that we will reduce the performance of our system. If you use this just for debugging purposes, it&amp;rsquo;s ok.&lt;/li&gt;
&lt;li&gt;This can create conflicts with other tools and libs that also trying to use the trace tool&lt;/li&gt;
&lt;li&gt;it seems dirty!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, maybe you&amp;rsquo;re asking yourself &lt;em&gt;&amp;ldquo;This guy is overthinking. Why he didn&amp;rsquo;t just do this?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@report(&#39;stuff goes here&#39;)
def func(x, y):
    random_var = np.random.uniform()
    ... #more local vars
    result = (x+y)**random_var
    return result, locals 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&amp;rdquo;&amp;hellip;and then, inside of decorator change to this:&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_result, local_vars = func(x, y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main point of using this decorator is to avoid any change in other parts of the codebase. For example,
if in any part of the codebase &lt;code&gt;func&lt;/code&gt; has been called you will have to change to&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = func(x, y) # to 
result = func(x, y)[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If after you choose to remove the decorator from a function you will need to be rollback all the above changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will increase the cognitive load in all members of the team who doesn&amp;rsquo;t care about what your decorator needs to do.&lt;/li&gt;
&lt;li&gt;If you propose this a solution is better just to create another function and face the consequences of this increase in complexity in the original codebase.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, maybe you&amp;rsquo;re now thinking: &amp;ldquo;&lt;em&gt;Right, this makes sense, but you&amp;rsquo;re avoiding theses issues creating issues in performance and debugging. Don&amp;rsquo;t sound good besides for just some special cases&lt;/em&gt;&amp;rdquo;. And I need to agree with you, &lt;strong&gt;it&amp;rsquo;s not a good solution for most of the cases!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, what we can do? The problem we&amp;rsquo;re facing is that python doesn&amp;rsquo;t have context managers that can deal with namespaces. Although there is an active discussion about this 
&lt;a href=&#34;https://mail.python.org/archives/list/python-ideas@python.org/thread/TAVHEKDZVYKJUGZKWSVZVAOGBPLZVKQG/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mail.python.org/archives/list/python-ideas@python.org/&lt;/a&gt;. But don&amp;rsquo;t worry about this big name. The important point here is that:&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;If a language doesn&amp;rsquo;t have a feature that I need what can I do?&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In python we are fine with this because it&amp;rsquo;s a language that turns to be easy to manipulate what is called &lt;strong&gt;A&lt;/strong&gt;bstract &lt;strong&gt;S&lt;/strong&gt;yntax &lt;strong&gt;T&lt;/strong&gt;ree and recompile a function with the manipulated syntax tree. &lt;strong&gt;Doing that way we&amp;rsquo;re in the realm of metaprogramming. Writing code which writes code.&lt;/strong&gt; If t&amp;rsquo;s not clear I&amp;rsquo;ll try to be more clear now.&lt;em&gt;&amp;quot;&amp;hellip;and then, inside of decorator change to this:&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_result, local_vars = func(x, y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main point of using this decorator is to avoid any change in other parts of the codebase. For example,
if in any part of the codebase &lt;code&gt;func&lt;/code&gt; has been called you will have to change to&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = func(x, y) # to 
result = func(x, y)[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If after you choose to remove the decorator from a function you will need to be rollback all the above changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will increase the cognitive load in all members of the team who doesn&amp;rsquo;t care about what your decorator needs to do.&lt;/li&gt;
&lt;li&gt;If you propose this a solution is better just to create another function and face the consequences of this increase of complexity in the original codebase.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, maybe you&amp;rsquo;re now thinking: &amp;ldquo;&lt;em&gt;Right, this makes sense, but you&amp;rsquo;re avoiding this issues creating issues in performance and debugging. Don&amp;rsquo;t sound good besides for just some special cases&lt;/em&gt;&amp;rdquo;. And I need to agree with you, &lt;strong&gt;it&amp;rsquo;s not a good solution for most of the cases!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, what we can do? The problem we&amp;rsquo;re facing is because python doesn&amp;rsquo;t have context managers that can deal with namespaces. Although there is an active discussion about this 
&lt;a href=&#34;https://mail.python.org/archives/list/python-ideas@python.org/thread/TAVHEKDZVYKJUGZKWSVZVAOGBPLZVKQG/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mail.python.org/archives/list/python-ideas@python.org/&lt;/a&gt;. But don&amp;rsquo;t worry about this big name. The important point here is that:&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;If a language doesn&amp;rsquo;t have a feature that I need what can I do?&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In python we are fine with this because it&amp;rsquo;s a language that turns to be easy to manipulate what is called &lt;strong&gt;A&lt;/strong&gt;bstract &lt;strong&gt;S&lt;/strong&gt;yntax &lt;strong&gt;T&lt;/strong&gt;ree and recompile a function with the manipulated syntax tree. &lt;strong&gt;Doing that way we&amp;rsquo;re in the realm of metaprogramming. Writing code which writes code.&lt;/strong&gt; If t&amp;rsquo;s not clear I&amp;rsquo;ll try to be more clear now.&lt;/p&gt;
&lt;h2 id=&#34;asts-what-they-are&#34;&gt;ASTs: What they are?&lt;/h2&gt;
&lt;p&gt;A programming language obviously is at least a language. OK, &lt;strong&gt;but what is a language?
Do all the human languages share the same building blocks? How can we compare different sentences?&lt;/strong&gt;
These questions seem more proper to be answered by philosophers. Well, maybe this is true, but these questions can also be answered by mathematicians and computer scientists. Although, mathematicians and CS people usually prefer to talk using mathematical formalism rather than long debates about the meaning of the stuff. In essence, an &lt;strong&gt;AST&lt;/strong&gt; is a mathematical formalism that allows us to represent a sentence using a well-defined set of rules and structures represented by a tree.&lt;/p&gt;
&lt;h3&gt;How do you know that a sentence is grammatically correct?&lt;/h3&gt; 
&lt;p&gt;Intuitively, probably you remember  a set of rules that you learned during your life about how to organize and compose verbs, nouns, adjectives, adverbs, etc. This set of rules and guidelines is the &lt;em&gt;Syntax&lt;/em&gt; of a language. A &lt;strong&gt;S&lt;/strong&gt;yntax &lt;strong&gt;T&lt;/strong&gt;ree is a structure that helps us to understand a sentence.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    After constructing the syntax tree we can look in the guidelines book of our language and check if this tree has a valid structure.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Take for example
the sentence: &lt;em&gt;&amp;ldquo;I drive a car to my college&amp;rdquo;&lt;/em&gt;, the syntax tree is the following:&lt;/p&gt;







  
  















&lt;figure id=&#34;figure-a-syntax-tree-for-the-sentence-i-drive-a-car-to-my-college-source-geeks-for-geekssyntax-tree--natural-language-processinghttpswwwgeeksforgeeksorgsyntax-tree-natural-language-processing&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/python_ast_and_decorators_with_locals/ast_english_sentence_hue5b8d52ce962721ee6d0acb19268cb10_239788_0x400_resize_lanczos_2.png&#34; data-caption=&#34;A &amp;lt;strong&amp;gt;S&amp;lt;/strong&amp;gt;yntax &amp;lt;strong&amp;gt;T&amp;lt;/strong&amp;gt;ree for the sentence: &amp;lt;em&amp;gt;I drive a car to my college&amp;lt;/em&amp;gt;. &amp;lt;strong&amp;gt;Source&amp;lt;/strong&amp;gt;:&amp;lt;a href=&amp;#34;https://www.geeksforgeeks.org/syntax-tree-natural-language-processing/&amp;#34;&amp;gt; Geeks for Geeks:Syntax Tree – Natural Language Processing.&amp;lt;/a&amp;gt;&#34;&gt;


  &lt;img src=&#34;/post/python_ast_and_decorators_with_locals/ast_english_sentence_hue5b8d52ce962721ee6d0acb19268cb10_239788_0x400_resize_lanczos_2.png&#34; alt=&#34;&#34;  height=&#34;400px&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A &lt;strong&gt;S&lt;/strong&gt;yntax &lt;strong&gt;T&lt;/strong&gt;ree for the sentence: &lt;em&gt;I drive a car to my college&lt;/em&gt;. &lt;strong&gt;Source&lt;/strong&gt;:&lt;a href=&#34;https://www.geeksforgeeks.org/syntax-tree-natural-language-processing/&#34;&gt; Geeks for Geeks:Syntax Tree – Natural Language Processing.&lt;/a&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;What is the advantage of using ASTs? Notice that we don&amp;rsquo;t need to talk about how many spaces you&amp;rsquo;re using, we didn&amp;rsquo;t talk about your calligraphy and besides that, &lt;strong&gt;we have a hierarchy structure that allows us to analyze the validity of the sentence per level! If we want to change any element of the sentence we can directly manipulate the node which represents that element for a safe guarantee that the manipulated sentence is still grammatically correct!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not a surprise that ASTs are also a common tool used in computer science to analyze the correctness of a piece of code and as a common part of the process of compiling/interpreting a code. Here we will extend the behavior of a python decorator manipulating the AST. But before that, I would like to ask you a question:&lt;/p&gt;
&lt;h5 class=&#34;text-center&#34;&gt;Is Python an interpreted language?&lt;/h5&gt;
&lt;h2 id=&#34;python-interpreted-or-compiled&#34;&gt;Python: interpreted or compiled?&lt;/h2&gt;
&lt;p&gt;Usually, when I meet a python hater (or even an enthusiast) they say phrases like that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Python is slow because it&amp;rsquo;s an interpreted language!&amp;quot;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Python sucks because doesn&amp;rsquo;t have a compiler!&amp;quot;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, these assertions are not true. The important point is that: &lt;em&gt;when people refer to python commonly they are actually talking about the language python and the CPython virtual machine&lt;/em&gt;. Let&amp;rsquo;s talk more about these misconceptions.&lt;/p&gt;
&lt;p&gt;First, the distinction between interpreted and compiled languages is very blurry today.
Second, let&amp;rsquo;s see a nasty thing&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hello_world = &amp;quot;print(&#39;Hello, world!&#39;)&amp;quot;
hello_world_obj = compile(hello_world, &#39;&amp;lt;string&amp;gt;&#39;, &#39;single&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah, if you&amp;rsquo;re trying to defend that python is interpreted the things start to get more hard for you. &lt;strong&gt;Why is there a &lt;strong&gt;compile&lt;/strong&gt;  available?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;exec(hello_world_obj)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello, world!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m executing a thing that has been compiled??? What is this hello_world_obj?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&amp;quot;Bad news for you:\n\tContent: {hello_world_obj.co_code}\n\tType: {type(hello_world_obj.co_code)}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Bad news for you:
	Content: b&#39;e\x00d\x00\x83\x01F\x00d\x01S\x00&#39;
	Type: &amp;lt;class &#39;bytes&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what is this stuff?&lt;/p&gt;
&lt;p&gt;Is important to understand what happens behind the scenes.&lt;/p&gt;
&lt;p&gt;After you write a python code and call the python command, python starts a compiling phase creating the ASTs; generating the bytecotes that will be attached to &lt;strong&gt;code objects&lt;/strong&gt;, and then, these code objects will be interpreted by the CPython virtual machine. The diagram below is a simple representation of this process with some details hidden&lt;/p&gt;
&lt;div class=&#34;mermaid mermaidContainer&#34;&gt;
graph LR;
A[Source Code]--&gt;|parsing|B[Parse Tree];
B--&gt;C[AST];
C--&gt;E[Bytecode];
E--&gt;F[Code Object];
F--&gt;|execution by|G[CPython Virtual Machine];
&lt;/div&gt;
&lt;p&gt;The compilation phase are the firts steps of the above diagram&lt;/p&gt;
&lt;div class=&#34;mermaid mermaidContainer&#34;&gt;
graph LR;
A[Source Code]--&gt;|parsing|B[Parse Tree];
B--&gt;C[AST];
C--&gt;E[Bytecode];
E--&gt;F[Code Object];
&lt;/div&gt;
&lt;p&gt;But don&amp;rsquo;t worry about most of the big names above. The only concepts that will matter to us are the AST, bytecodes, and Code object.
&lt;strong&gt;Bytecodes are just a compact way to tell the interpreter what we want to do.
The code object is just a way to encapsulate the bytecodes extracted from the AST.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But how does this help us?&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Our solution will involve the manipulation of the AST and after that generating a new code object with the related manipulated AST!
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;extracting-asts-and-interpreting-them&#34;&gt;Extracting ASTs and interpreting them&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s see a simple example of a function and the extracted AST.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import inspect
import ast
import astor # install this for pretty printing
def example(a: float, b:float = 2) -&amp;gt; float:
    s = a+b
    return s

tree = ast.parse(inspect.getsource(example))
print(astor.dump(tree))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Module(
    body=[
        FunctionDef(name=&#39;example&#39;,
            args=arguments(posonlyargs=[],
                args=[arg(arg=&#39;a&#39;, annotation=Name(id=&#39;float&#39;), type_comment=None),
                    arg(arg=&#39;b&#39;, annotation=Name(id=&#39;float&#39;), type_comment=None)],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[Constant(value=2, kind=None)]),
            body=[
                Assign(targets=[Name(id=&#39;s&#39;)],
                    value=BinOp(left=Name(id=&#39;a&#39;), op=Add, right=Name(id=&#39;b&#39;)),
                    type_comment=None),
                Return(value=Name(id=&#39;s&#39;))],
            decorator_list=[],
            returns=Name(id=&#39;float&#39;),
            type_comment=None)],
    type_ignores=[])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above output is our AST, take some time looking into it to see how all our code stuff is organized.
The image below shows the graph representation of the above output&lt;/p&gt;







  
  















&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/python_ast_and_decorators_with_locals/simple_ast_hudca446749283cbe6d28b67a245474890_120568_0x1000_resize_lanczos_2.png&#34; &gt;


  &lt;img src=&#34;/post/python_ast_and_decorators_with_locals/simple_ast_hudca446749283cbe6d28b67a245474890_120568_0x1000_resize_lanczos_2.png&#34; alt=&#34;&#34;  height=&#34;400px&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Each element in the above output with an upper case letter is a &lt;strong&gt;node&lt;/strong&gt; (Name, BinOp, FunctionDef, etc)  from the base class &lt;code&gt;ast.Node&lt;/code&gt;. One of the most important node types are the &lt;code&gt;ast.Name&lt;/code&gt;.
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;value=BinOp(left=Name(id=&#39;a&#39;), op=Add, right=Name(id=&#39;b&#39;)),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the &lt;code&gt;ast.Name&lt;/code&gt; is used to refer a variable by the name, &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s come back to our problem. Remember that one bad solution it was rewriting every function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def func(x, y):
    random_var = np.random.uniform()
    ... #more local vars
    result = (x+y)**random_var
    return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def func_transformed(x, y):
    random_var = np.random.uniform()
    ... #more local vars
    result = (x+y)**random_var
    return result, locals 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The big stuff that we will do is to &lt;strong&gt;write a function that codes new functions for us! This is metaprogramming!&lt;/strong&gt; And at same time we will write a decorator that will avoid any change in our codebase!&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-be-efficient-in-metaprogramming&#34;&gt;How can I be efficient in metaprogramming?&lt;/h2&gt;
&lt;p&gt;We must create a function that generates a new one similar to &lt;code&gt;func_transformed&lt;/code&gt;. How to get an idea of what we need to do?&lt;/p&gt;
&lt;h3 id=&#34;the-6-simple-steps&#34;&gt;The 6 simple steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create an example function&lt;/li&gt;
&lt;li&gt;Code the transformed function from the example function&lt;/li&gt;
&lt;li&gt;Code a simple test to check if the transformed function is correct&lt;/li&gt;
&lt;li&gt;Extract the AST from the example and the transformed function&lt;/li&gt;
&lt;li&gt;Compare the ASTs. What is the difference? Annotate this difference somewhere
&lt;ul&gt;
&lt;li&gt;You can use the &lt;code&gt;difflib&lt;/code&gt; module that comes with python to diff strings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creates a new and more complex example function and repeats the process until you get a good  idea of what you need to do.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After you have a good idea of what you need to do, you can start writing your metaprogramming function.&lt;/p&gt;
&lt;h2 id=&#34;creating-our-metaprogramming-function&#34;&gt;Creating our metaprogramming function&lt;/h2&gt;
&lt;h3 id=&#34;first-six-steps-interaction&#34;&gt;First six-steps interaction&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start our first interaction writing one function, the expected transformed function and the test to check if it is correct.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def example_1(x, y):
    internal_var  =  222
    result = (x+y)**internal_var
    return result
def example_1_expected(x, y):
    internal_var = 222
    result = (x+y)**internal_var
    return result, locals()

def test_meta_example_1(meta_func, x, y):
    expected_result, expected_locals = example_1_expected(x, y)
    result, locals_dict = meta_func(x, y)
    assert result == expected_result
    assert expected_locals == locals_dict
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything looks fine. Now we will use the &lt;code&gt;difflib&lt;/code&gt; to see the differences between the two ASTs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import difflib
from pprint import pprint

example_1_ast_str = astor.dump_tree(ast.parse(inspect.getsource(example_1)))
example_1_expected_str = astor.dump_tree(ast.parse(inspect.getsource(example_1_expected)))


pprint(
    list(
        difflib.unified_diff(example_1_ast_str.splitlines(), example_1_expected_str.splitlines(), n=0)
    )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;--- \n&#39;,
 &#39;+++ \n&#39;,
 &#39;@@ -3 +3 @@\n&#39;,
 &amp;quot;-        FunctionDef(name=&#39;example_1&#39;,&amp;quot;,
 &amp;quot;+        FunctionDef(name=&#39;example_1_expected&#39;,&amp;quot;,
 &#39;@@ -19 +19 @@\n&#39;,
 &amp;quot;-                Return(value=Name(id=&#39;result&#39;))],&amp;quot;,
 &amp;quot;+                Return(value=Tuple(elts=[Name(id=&#39;result&#39;), &amp;quot;
 &amp;quot;Call(func=Name(id=&#39;locals&#39;), args=[], keywords=[])]))],&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we know that we must change this Node in the AST&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Return(value=Name(id=&#39;result&#39;))],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Return(value=Tuple(elts=[Name(id=&#39;result&#39;), Call(func=Name(id=&#39;locals&#39;), args=[], keywords=[])]))],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How we can do this? With the help of &lt;code&gt;NodeTransformer&lt;/code&gt; class&lt;/p&gt;
&lt;h3 id=&#34;the-nodetransformer-class&#34;&gt;The NodeTransformer class&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ast.NodeTransformer&lt;/code&gt; allows us to create objects with a walker-like interface. The walker will visit each node in the AST and during each visit, the walker can remove, replace, modify or add nodes, and after that, he can continue to walk to the childreens of the node or stop there.&lt;/p&gt;
&lt;p&gt;How can we use this?
First, we start by creating a new class derived from &lt;code&gt;ast.NodeTransformer&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ASTTransformer(ast.NodeTransformer):
    def visit_Return(self, node):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to interact/change/delete a node of type &lt;code&gt;Something&lt;/code&gt; you must override the &lt;code&gt;visit_Something&lt;/code&gt; method. Thus, because we need to change the &lt;code&gt;Return&lt;/code&gt; node we override the &lt;code&gt;visit_Return&lt;/code&gt;. If we do just the following, our walker will not change our AST,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ASTTransformer(ast.NodeTransformer):
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s start the modifications. We need to create a new node responsible to call the &lt;code&gt;locals&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ASTTransformer(ast.NodeTransformer):
    def visit_Return(self, node):
        node_locals = ast.Call(
            func=ast.Name(id=&#39;locals&#39;, ctx=ast.Load()),
            args=[], keywords=[]
        )
        self.generic_visit(node)
        return node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We used a &lt;code&gt;Name&lt;/code&gt; node to identify the &lt;code&gt;locals&lt;/code&gt; function. Now, according to the diff result our &lt;code&gt;Return&lt;/code&gt; node must be transformed into a &lt;code&gt;Return&lt;/code&gt; of a Tuple node&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ASTTransformer(ast.NodeTransformer):
    def visit_Return(self, node):
        node_locals = ast.Call(
            func=ast.Name(id=&#39;locals&#39;, ctx=ast.Load()),
            args=[], keywords=[]
        )
        new_node.value = ast.Tuple(
            elts=[
                node.value,
                node_locals
            ],
            ctx=ast.Load()
        )
        self.generic_visit(new_node)
        return new_node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A new thing appeared. The &lt;code&gt;elts&lt;/code&gt; argument. But don&amp;rsquo;t worry, this is just an argument which tells what is the list of other nodes &lt;code&gt;Tuple&lt;/code&gt; has. Whenever you have some doubt about AST stuff, you can check the &lt;code&gt;ast&lt;/code&gt; documentation 
&lt;a href=&#34;https://docs.python.org/3/library/ast.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. The documentation is simple to understand because python is simple!&lt;/p&gt;
&lt;p&gt;Everything is almost done. The last thing is to fix our AST. Because when we change the Node we need to fill missing information like the line_number and column_offset. Thanks to python we just need to call &lt;code&gt;fix_missing_locations&lt;/code&gt;  to fill this for us.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
class ASTTransformer(ast.NodeTransformer):
    def visit_Return(self, node):
        new_node = node
        node_locals = ast.Call(
            func=ast.Name(id=&#39;locals&#39;, ctx=ast.Load()),
            args=[], keywords=[]
        )
        new_node.value = ast.Tuple(
            elts=[
                node.value,
                node_locals
            ],
            ctx=ast.Load()
        )
        ast.copy_location(new_node, node)
        ast.fix_missing_locations(new_node)
        self.generic_visit(new_node)
        return new_node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, let&amp;rsquo;s see if is working. We must instantiate our transformer and call the &lt;code&gt;visit&lt;/code&gt; method that tells the walker to walk in the AST and do all the modification we&amp;rsquo;re asking&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tree_meta = ast.parse(inspect.getsource(example_1))
transformer = ASTTransformer()
transformer.visit(tree_meta)
example_1_meta_ast_str = astor.dump_tree(tree_meta)
example_1_expected_str = astor.dump_tree(ast.parse(inspect.getsource(example_1_expected)))


pprint(
    list(
        difflib.unified_diff(example_1_meta_ast_str.splitlines(), example_1_expected_str.splitlines(), n=0)
    )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;--- \n&#39;,
 &#39;+++ \n&#39;,
 &#39;@@ -3 +3 @@\n&#39;,
 &amp;quot;-        FunctionDef(name=&#39;example_1&#39;,&amp;quot;,
 &amp;quot;+        FunctionDef(name=&#39;example_1_expected&#39;,&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our first iteration was successful! Let&amp;rsquo;s try a more complex example.&lt;/p&gt;
&lt;h3 id=&#34;the-second-six-steps-interaction&#34;&gt;The second six-steps interaction&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll just add more complexity without any particular meaning, we can be creative!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def example_2(x, y):
    internal_var  =  222
    def sub(x, y):
        ommit_this_var = 1
        return x - y
    result = sub(x,y)**internal_var
    return (result, False)
def example_2_expected(x, y):
    internal_var  =  222
    def sub(x, y):
        ommit_this_var = 1
        return x - y
    result = sub(x,y)**internal_var
    return ((result, False), locals())
def test_meta_example_2(meta_func, x, y):
    expected_result, expected_locals = example_2_expected(x, y)
    result, locals_dict = meta_func(x, y)
    del locals_dict[&amp;quot;sub&amp;quot;]
    del expected_locals[&amp;quot;sub&amp;quot;]
    assert result == expected_result
    assert expected_locals == locals_dict
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;example_2_ast_str = astor.dump_tree(ast.parse(inspect.getsource(example_2)))
example_2_expected_str = astor.dump_tree(ast.parse(inspect.getsource(example_2_expected)))


pprint(
    list(
        difflib.unified_diff(example_2_ast_str.splitlines(), example_2_expected_str.splitlines(), n=0)
    )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;--- \n&#39;,
 &#39;+++ \n&#39;,
 &#39;@@ -3 +3 @@\n&#39;,
 &amp;quot;-        FunctionDef(name=&#39;example_2&#39;,&amp;quot;,
 &amp;quot;+        FunctionDef(name=&#39;example_2_expected&#39;,&amp;quot;,
 &#39;@@ -37 +37,4 @@\n&#39;,
 &amp;quot;-                Return(value=Tuple(elts=[Name(id=&#39;result&#39;), &amp;quot;
 &#39;Constant(value=False, kind=None)]))],&#39;,
 &#39;+                Return(&#39;,
 &#39;+                    value=Tuple(&#39;,
 &amp;quot;+                        elts=[Tuple(elts=[Name(id=&#39;result&#39;), &amp;quot;
 &#39;Constant(value=False, kind=None)]),&#39;,
 &amp;quot;+                            Call(func=Name(id=&#39;locals&#39;), args=[], &amp;quot;
 &#39;keywords=[])]))],&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it&amp;rsquo;s time to cross the fingers and see if we need working more&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tree_meta = ast.parse(inspect.getsource(example_2))
transformer = ASTTransformer()
transformer.visit(tree_meta)
example_2_meta_ast_str = astor.dump_tree(tree_meta)
example_2_expected_str = astor.dump_tree(ast.parse(inspect.getsource(example_2_expected)))


pprint(
    list(
        difflib.unified_diff(example_2_meta_ast_str.splitlines(), example_2_expected_str.splitlines(), n=0)
    )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;--- \n&#39;,
 &#39;+++ \n&#39;,
 &#39;@@ -3 +3 @@\n&#39;,
 &amp;quot;-        FunctionDef(name=&#39;example_2&#39;,&amp;quot;,
 &amp;quot;+        FunctionDef(name=&#39;example_2_expected&#39;,&amp;quot;,
 &#39;@@ -27,4 +27 @@\n&#39;,
 &#39;-                        Return(&#39;,
 &#39;-                            value=Tuple(&#39;,
 &amp;quot;-                                elts=[BinOp(left=Name(id=&#39;x&#39;), op=Sub, &amp;quot;
 &amp;quot;right=Name(id=&#39;y&#39;)),&amp;quot;,
 &amp;quot;-                                    Call(func=Name(id=&#39;locals&#39;), args=[], &amp;quot;
 &#39;keywords=[])]))],&#39;,
 &amp;quot;+                        Return(value=BinOp(left=Name(id=&#39;x&#39;), op=Sub, &amp;quot;
 &amp;quot;right=Name(id=&#39;y&#39;)))],&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, our &lt;code&gt;ASTTransformer&lt;/code&gt; was not able to deal with this crazy guy. What is the problem? If you check carefully you will notice that the inner function &lt;code&gt;def sub&lt;/code&gt; is the problem. We don&amp;rsquo;t want to change any &amp;ldquo;sub&amp;rdquo; function, so we need to tell our walker to avoid changing this kind of stuff. To do so, we will create a flag to tell if the walker is in a sub-function, and we will just override the &lt;code&gt;visit_FunctionDef&lt;/code&gt; method to check this flag&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ASTTransformer(ast.NodeTransformer):
    def visit_FunctionDef(self, node):
        if self._sub:
            return node
        self._sub = True
        self.generic_visit(node)
        return node

    def visit_Module(self, node):
        self._sub = 0
        self.generic_visit(node)

    def visit_Return(self, node):
        new_node = node
        node_locals = ast.Call(
            func=ast.Name(id=&#39;locals&#39;, ctx=ast.Load()),
            args=[], keywords=[]
        )
        new_node.value = ast.Tuple(
            elts=[
                node.value,
                node_locals
            ],
            ctx=ast.Load()
        )
        ast.copy_location(new_node, node)
        ast.fix_missing_locations(new_node)
        self.generic_visit(new_node)
        return new_node 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tree_meta = ast.parse(inspect.getsource(example_2))
transformer = ASTTransformer()
transformer.visit(tree_meta)
example_2_meta_ast_str = astor.dump_tree(tree_meta)
example_2_expected_str = astor.dump_tree(ast.parse(inspect.getsource(example_2_expected)))


pprint(
    list(
        difflib.unified_diff(example_2_meta_ast_str.splitlines(), example_2_expected_str.splitlines(), n=0)
    )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;--- \n&#39;,
 &#39;+++ \n&#39;,
 &#39;@@ -3 +3 @@\n&#39;,
 &amp;quot;-        FunctionDef(name=&#39;example_2&#39;,&amp;quot;,
 &amp;quot;+        FunctionDef(name=&#39;example_2_expected&#39;,&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our new &lt;code&gt;ASTTransformer&lt;/code&gt; was able to deal with our new complicated example!&lt;/p&gt;
&lt;h3 id=&#34;creating-a-new-function-at-runtime&#34;&gt;Creating a new function at runtime&lt;/h3&gt;
&lt;p&gt;We have a &lt;code&gt;ASTTransformer&lt;/code&gt; , now we must compile the transformed &lt;code&gt;AST&lt;/code&gt; into a new function. In python, we can create a new function using the &lt;code&gt;FunctionType&lt;/code&gt;, see below&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from types import FunctionType, CodeType

def transform_and_compile(func: FunctionType)-&amp;gt;FunctionType:
    source = inspect.getsource(func)
    # we put this to remove the line from source code with the decorator
    source = &amp;quot;\n&amp;quot;.join([l for l in source.splitlines() if not l.startswith(&amp;quot;@&amp;quot;)])
    tree = ast.parse(source)
    transformer = ASTTransformer()
    transformer.visit(tree)
    code_obj = compile(tree, func.__code__.co_filename, &#39;exec&#39;)
    function_code = [c for c in code_obj.co_consts if isinstance(c, CodeType)][0]
    # we must to pass the globals context to the function
    transformed_func = FunctionType(function_code, func.__globals__)
    return transformed_func
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test_meta_example_1(transform_and_compile(example_1), 4, 2)
test_meta_example_2(transform_and_compile(example_2), 1, 2)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;transform_and_compile&lt;/code&gt; was able to create new functions that passed in all the tests! We can now move further to the final and easy step which is just to integrate this function with our decorator!&lt;/p&gt;
&lt;h2 id=&#34;integrating-the-ast-manipulation-with-a-decorator&#34;&gt;Integrating the AST manipulation with a decorator&lt;/h2&gt;
&lt;p&gt;We will call the &lt;code&gt;transform_and_compile&lt;/code&gt; right after the &lt;code&gt;def decorate&lt;/code&gt; to avoid unnecessary compilations every time that the decorated function is called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def report(fmt):
    def decorate(func):
        meta_func = transform_and_compile(func)
        ....
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside &lt;code&gt;def decorated&lt;/code&gt; we call the &lt;code&gt;meta_func&lt;/code&gt; and return just the result because we don&amp;rsquo;t want to change our codebase.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def report(fmt):
    def decorate(func):
        meta_func = transform_and_compile(func)
        ...
        def decorated(*_args):
            _result, internal_locals = meta_func(*_args)
            ....
            return _result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With all the stuff we learned in the previous post our &lt;code&gt;report&lt;/code&gt; decorator with the above changes will be&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
def report(fmt):
    def decorate(func):
        meta_func = transform_and_compile(func)
        sig = inspect.signature(func)
        def decorated(*_args):
            _result, internal_locals = meta_func(*_args)
            named_args = {}
            num_args = len(_args)
            for i, (k, v) in enumerate(sig.parameters.items()):
                if i &amp;lt; num_args:
                    named_args[k] = repr(_args[i])
                else:
                    named_args[k] = repr(v.default)
            
            name = func.__name__
            result = repr(_result)
            args_dict = {
                **internal_locals,
                **locals(),
                **named_args
            }
            print(fmt.format(**args_dict))
            # store the information in some place
            return result
        return decorated 
    return decorate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s see the result with a dummy function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@report(fmt=&#39;{name}(a={a}, b={b}, c={c}); sum_ab {sum_ab}, diff_ab {dif_ab}; r={result}&#39;)
def dummy_example(a, b, c=2):
    sum_ab = a + b
    dif_ab = a - b
    r = sum_ab**c + dif_ab**c
    return r

r = dummy_example(2, 3, 1)
print(&amp;quot;r:&amp;quot;, r)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dummy_example(a=2, b=3, c=1); sum_ab 5, diff_ab -1; r=4
r: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know this post is quite hard to read, but I think it&amp;rsquo;s worth to share it. I hope you enjoyed it!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
