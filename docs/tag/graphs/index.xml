<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphs | Bruno Messias</title>
    <link>/tag/graphs/</link>
      <atom:link href="/tag/graphs/index.xml" rel="self" type="application/rss+xml" />
    <description>graphs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en</language><copyright>Bruno Messias</copyright><lastBuildDate>Tue, 15 Feb 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hucd6a3d413e7b81060a1d462b35f64cf9_5018_512x512_fill_lanczos_center_3.png</url>
      <title>graphs</title>
      <link>/tag/graphs/</link>
    </image>
    
    <item>
      <title>Grafos e filtragem de arestas: conceitos e confusões. Parte I</title>
      <link>/post/edge_graph_filtering/</link>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/edge_graph_filtering/</guid>
      <description>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Esse post é bem informal e foi feito para  o grupo de estudos de MlOps. O conteúdo pode mudar significativamente com o passar do tempo.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Quando olhamos uma imagem temos a tendência de procurar padrões  o que reduz o esforço e tempo necessário para identificar do que se trata. Em análise de dados  filtros podem ser aplicados com a mesma motivação.&lt;/p&gt;
&lt;p&gt;Enquanto o processo de filtragem  em um conjunto de pontos é apresentado em cursos  acadêmicos e tutoriais, existe pouco  material  em relação a grafos.  Portanto, criei  esse post para discutir o conceito de filtragem e padrões em grafos e as diferentes maneiras de se obter tal filtragem. Tentei ser didático o suficiente para que uma pessoa fora da computação ou exatas (que esteja iniciando em dados) consiga compreender o texto. Sinta-se à vontade para pular qualquer seção do post :)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Grafos,  redes e redes complexas são praticamente o mesmo conceito. Portanto, você pode encontrar termos como &lt;em&gt;filtering edges on complex networks&lt;/em&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Os exemplos desse post usam python e as seguintes bibliotecas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python3 -m pip install numpy matplotlib networkx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;o-que-é-um-grafo&#34;&gt;O que é um grafo?&lt;/h2&gt;
&lt;p&gt;Um grafo é uma estrutura de dados que  você constantemente  está em contato. Alguns exemplos: sua rede de seguidores e seguidores no twitter, as  transações financeiras associadas a sua chave PIX, as relações de repositório e contribuições no github, etc.&lt;/p&gt;
&lt;p&gt;Um grafo armazena objetos que têm relações pares a pares entre si. Sendo que é possível associar a cada objeto ou relação um outro tipo de dado genérico tais como um número real, um vetor, uma imagem ou mesmo outro grafo.&lt;/p&gt;
&lt;p&gt;A imagem abaixo representa um grafo dirigido formado por 4 vértices.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
  A--&amp;gt;B;
  B--&amp;gt;A;
  A--&amp;gt;C;
  B--&amp;gt;D;
  C--&amp;gt;D;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos usar a letra $G$ para representar um grafo. A letra $V$ para o conjunto de vértices (objetos) e $E$ para o conjunto de arestas (relações). Na imagem acima nosso grafo seria dado então pelo conjunto $V=\{A,B,C,D\}$  e $E=\{(A,B), (B,A), (A,C), (B,D), (C,D)\}$.&lt;/p&gt;
&lt;p&gt;Como disse  no início desta seção é possível associar &lt;em&gt;coisas&lt;/em&gt; tanto as arestas quanto os vértices.  Por exemplo, o grafo abaixo poderia representar transações financeiras entre 3 pessoas e o valor que cada uma tem em sua conta corrente&lt;/p&gt;
&lt;div class=&#34;mermaid mermaidContainer&#34;&gt;
graph TD;
  A[A R\$100,00]--&gt;|R\$1|B;
  B[B R\$3,00]--&gt;|R\$2|A;
  C[C R\$0]--&gt;|R\$0,50|A;
&lt;/div&gt;
&lt;p&gt;Tais grafos de transações financeiras são usados, por exemplo, para detectar crimes de lavagem de dinheiro, formação de quadrilhas e fraudes quando o comportamento de um dado cliente é anómalo. Os valores nas arestas são os  &lt;strong&gt;pesos&lt;/strong&gt; do grafo.&lt;/p&gt;
&lt;h2 id=&#34;o-que-é-filtragem&#34;&gt;O que é filtragem?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Filtro tem origem na palavra feltro. O feltro era o material feito principalmente de lã   usado antigamente para separar um líquido de suas impurezas.&lt;/strong&gt; Um filtro em análise de dados é a mesma coisa: uma ferramenta que separa um conjunto de dados de uma sujeira, ruído. Portanto, assim como para filtrar uma bebida temos que decidir antes algumas coisas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O que queremos que seja removido?&lt;/li&gt;
&lt;li&gt;O quão eficiente é nosso filtro?&lt;/li&gt;
&lt;li&gt;Qual é o resultado esperado?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;filtragem-para-remover-ruídos&#34;&gt;Filtragem para remover ruídos&lt;/h3&gt;
&lt;p&gt;Talvez a primeira coisa que vem à sua cabeça quando  ouve a palavra filtro é Instagram. Alguns filtros de fotos feitos para embelezar nada mais são que um filtro para remoção de ruídos.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-imagem-original-e-imagem-com-contaminação-de-um-ruído&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/photo_noisy_hu82d76e04dbaf989091cb8bf76c11c929_737197_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;Imagem original e imagem com contaminação de um ruído.&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/photo_noisy_hu82d76e04dbaf989091cb8bf76c11c929_737197_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1600&#34; height=&#34;800&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Imagem original e imagem com contaminação de um ruído.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;O que consideramos ruído depende das respostas das perguntas que levantei anteriormente. Um ruído em uma imagem pode ser uma contribuição espúria devido ao sensor de uma câmera ser ruim. Um ruído pode ser também algo intrínseco, por exemplo os poros e rugas na sua pele.&lt;/p&gt;
&lt;h3 id=&#34;gestalt&#34;&gt;Filtragem para ressaltar características e  Gestalt &lt;/h3&gt;
&lt;p&gt;Os princípios de &lt;em&gt;Gestalt&lt;/em&gt;  são suposições de certas leis sobre como a mente humana processa imagens  através do reconhecimento de padrões. Em resumo, tal princípio estabelece que a percepção não é baseada em elementos individuais, mas em padrões  em que os elementos são arranjados ou têm contrastes entre si. &lt;strong&gt;Você não compreende uma imagem analisando cada pixel individualmente, mas como os pixels se organizam e diferem entre si!&lt;/strong&gt;&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-os-principios-da-gestalt-são-apresentados-nessa-figura--&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/gestalt_principles_hu63f5cabf0d008b5b0b2fbf74c03a67fd_175876_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;Os principios da &amp;lt;em&amp;gt;Gestalt&amp;lt;/em&amp;gt; são apresentados nessa figura.  [].&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/gestalt_principles_hu63f5cabf0d008b5b0b2fbf74c03a67fd_175876_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1920&#34; height=&#34;1080&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Os principios da &lt;em&gt;Gestalt&lt;/em&gt; são apresentados nessa figura.  [].
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Como se relaciona com os grafos? Um dos porquês para realizar a filtragem de um grafo consiste em remover relações (arestas) espúrias para ressaltar um dado padrão que queremos analisar. Comumente, esse padrão são estruturas de comunidades e/ou agrupamentos obtidos via métodos de visualização.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-os-princípios-da-gestalt-são-usados-para-desenvolver-métodos-de-processamento-de-imagens-imagem-retirada-de-&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/gestalt_cv_example_hu5510a9064a332f07be8be12a15f3553e_77088_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;Os princípios da &amp;lt;em&amp;gt;Gestalt&amp;lt;/em&amp;gt; são usados para desenvolver métodos de processamento de imagens. Imagem retirada de []&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/gestalt_cv_example_hu5510a9064a332f07be8be12a15f3553e_77088_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;652&#34; height=&#34;225&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Os princípios da &lt;em&gt;Gestalt&lt;/em&gt; são usados para desenvolver métodos de processamento de imagens. Imagem retirada de []
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Na imagem acima é mostrado o resultado de um método baseado na &lt;em&gt;Gestalt&lt;/em&gt; para simplificar uma imagem. Em que um algoritmo extrair um padrão de linhas de uma imagem. Em redes complexas temos o conceito de &lt;em&gt;backbones&lt;/em&gt; que são uma espécie de espinha dorsal, esqueleto, que representa as relações mais importantes entres os vértices (ficará mais claro na seção  sobre 
&lt;a href=&#34;#estatistico&#34;&gt;backbones&lt;/a&gt; . Nesse ponto não necessariamente estamos removendo relações assumindo que elas são um ruído da nossa medida, mas apenas queremos ressaltar esse backbone.&lt;/p&gt;
&lt;h3 id=&#34;filtragem-para-reduzir-o-custo-computacional&#34;&gt;Filtragem para reduzir o custo computacional&lt;/h3&gt;
&lt;p&gt;Embora a filtragem possa ser usada para remover uma contaminação em um dado e/ou facilitar termos &lt;em&gt;insights&lt;/em&gt;  Conseguimos também reduzir o custo computacional de algoritmos que atuam nesses dados. Um exemplo simples é mostrado no código abaixo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import io

X, Y = np.meshgrid(
    np.linspace(-5, 5, 100), np.linspace(-5, 5, 100))

z = np.exp(-0.1*(X**2 + Y**2))
z_noise = z + np.random.normal(0, 0.1, z.shape)

z = (z / z.max()*255).astype(np.uint8)
z_noise = (z_noise / z_noise.max()*255).astype(np.uint8)

data_noisy = io.BytesIO()
data = io.BytesIO()   
np.savez_compressed(data_noisy, z_noise)
np.savez_compressed(data, z)

print(f&amp;quot;Noisy {data_noisy.getbuffer().nbytes/10**6:.1f} MB&amp;quot;)
print(f&amp;quot;Original {data.getbuffer().nbytes/10**6:.1f} MB&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Noisy 3.6 MB
Original 0.2 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O output indica que &lt;strong&gt;o resultado de contaminação por ruído aumenta o custo de armazenamento de um mesmo padrão de dados.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Em grafos,  filtrar para reduzir custo computacional costuma ser essencial. Por exemplo, muitos algoritmos   escalam com o número de arestas. Portanto, um grafo em que cada par de vértices tem uma aresta teria custo computacional $O(número\ \ de\ \ vértices^2)$ &lt;strong&gt;o que é impraticável para apenas algumas dezenas de milhares de vértices. Portanto, tornando a análise de dados impossível.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;confusões-sobre-o-que-é-filtragem-em-grafos&#34;&gt;Confusões sobre o que é filtragem em grafos&lt;/h2&gt;
&lt;p&gt;Antes de entrar mais a fundo na filtragem de grafos é melhor você ler   com calma a seguinte desambiguação para você  não ficar perdido na literatura.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Desambiguação.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A área de grafos/redes foi/é  é meio bagunçada pois cada campo de estudos  (engenharia, computação, matemática, física, sociologia, etc) costuma reinventar o mesmo método com outro nome ou usar nomes iguais para coisas diferentes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Graph coarsening&lt;/p&gt;
&lt;p&gt;Em ciência da computação: o processo de obter uma representação mais grosseira de um grafo removendo arestas e/ou vértices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edge filtering:&lt;/p&gt;
&lt;p&gt;Em ciência da computação: o processo de aplicar um filtro (processamento de sinais) em valores definidos nas arestas. &lt;strong&gt;Uma filtragem nos valores associados às arestas!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Outras disciplinas:  o processo de remover arestas que não se adequam a um dado padrão.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Graph sparsification&lt;/p&gt;
&lt;p&gt;Termo usado  para representar tanto a remoção de vértices quanto arestas (no mesmo sentido de graph coarsening). Por exemplo: “spectral edge sparsification”. Contudo, é mais utilizado quando você parte de um grafo vazio (sem relações) e vai adicionando tentando preservar as propriedades espectrais do grafo original.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Você pode encontrar trabalhos com o termo  &lt;em&gt;spectral filtering&lt;/em&gt; ou &lt;em&gt;spectral coarsening&lt;/em&gt; , ambos significando a  mesma coisa. Contudo, spectral filters  costuma ser usado mais em trabalhos de processamento de sinal em grafos.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Quando você aplica um filtro em uma foto para te deixar mais bonito você obviamente objetiva que as pessoas ainda te reconheçam. Isto é, as formas e aspectos mais importantes do seu rosto devem ser preservadas ou pouco alteradas. Vamos representar essas considerações por:
$$
\begin{eqnarray}
\mathcal P_{forma}(foto\ \ original) \sim \mathcal P_{forma}(foto\ \ filtrada)\newline
\mathcal P_{cor}(foto\ \ original) \sim \mathcal P_{cor}(foto\ \ filtrada)\newline
&amp;hellip;etc
\end{eqnarray}
$$
Também espera-se que  o ruído da câmera, rugas e imperfeições sejam reduzidas $\mathcal P_{rugas}(foto\ \ original) \neq \mathcal P_{rugas}(foto\ \ filtrada)$  e $|rugas\  \ foto \  \ original| \ll  |rugas\  \ foto \  \ filtrada|$.  O símbolo $|.|$ significa que estamos contando o número de rugas da foto, do conjunto de rugas, e $\ll$ significa muito menor.&lt;/p&gt;
&lt;p&gt;Da mesma maneira que no caso de fotos, se temos um grafo, $G$, queremos que sua versão filtrada, $\tilde G$, tenha uma ou mais  propriedades (definido de antemão) preservadas após efetuar a filtragem, isto é
$$
\mathcal P_{algo} (G) \sim \mathcal P_{algo} (\tilde G)
$$&lt;/p&gt;
&lt;p&gt;Sendo que o objetivo principal  costuma ser uma redução drástica no número de relações (arestas), $|E| \le |\tilde E|$. OK, então antes de entrar nos métodos de filtragem precisamos discorrer sobre quais seriam essas propriedades que queremos preservar.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Diferente de uma imagem em que filtros só ocorrem nos valores definidos na posição dos pixels em um grafo, podemos filtrar tanto os valores definidos nos vértices/arestas quanto a própria estrutura do grafo em si.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Novamente: filtrar a estrutura de um grafo $\neq$ filtrar valores definidos na estrutura de um grafo&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;algumas-propriedades-de-grafos&#34;&gt;Algumas propriedades de grafos&lt;/h2&gt;
&lt;h3 id=&#34;componentes&#34;&gt;Componentes&lt;/h3&gt;
&lt;p&gt;Uma propriedade importante de um grafo é o número de componentes. Um grafo é fortemente conectado quando é possível sair de qualquer vértice e chegar em qualquer outro. &lt;strong&gt;Um grafo fortemente conectado tem apenas uma componente&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Por exemplo,  abaixo é apresentado um grafo fortemente conectado&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
  A---B;
  D---A;
  B---C
  A---C;
  D---E;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ao remover a aresta $(D , A)$ obtemos o seguinte grafo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
  A---B;
  B---C
  A---C;
  D---E;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como é impossível sair de $D$ ou $E$ e chegar em $A$, $B$ ou $C$ após a remoção, o grafo não é mais fortemente conectado e tem duas componentes. Qual a relação disso com filtragem?&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Para muitos problemas, espera-se que métodos de filtragem sejam bons em preservar o número de componentes. Pois isso afeta em muito as dinâmicas ocorrendo no grafo. Assim como algoritmos de análise de dados. x&#39;&lt;/p&gt;
&lt;p&gt;Imagina se ao realizar uma filtragem você remova uma aresta que impede a contaminação por um vírus entre duas cidades no seu modelo?&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;comunidades&#34;&gt;Comunidades&lt;/h3&gt;
&lt;p&gt;Dentro de cada componente de um grafo temos o conceito de comunidade. Intuitivamente, quando pensamos em comunidade no âmbito das relações pessoais imaginamos um grupo de pessoas que tem fortes relações entre si, muito mais fortes que as relações com outras pessoas fora do grupo. Por exemplo, família, colegas de trabalho etc. Nesse contexto, qual é a tarefa de detecção de comunidades? Como efetuar tal tarefa?&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Em certos casos queremos que a filtragem não altere a identificação das estruturas de comunidade no nosso grafo.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Suponha que você queira modelar o grupo de pessoas pertencentes a dois partidos políticos,  opostos na ideologia. Você pode representar as relações entre as pessoas usando grafos. Colocando uma aresta entre uma pessoa e outra com o peso representado um grau de &lt;em&gt;concordância&lt;/em&gt; entre certos assuntos. O que seria um algoritmo de detecção de comunidade em tal caso? Se temos o &lt;em&gt;ground truth&lt;/em&gt;, isto é, o partido que cada pessoa se identifica, o algoritmo é uma  função, $f$, que recebendo  as relações , $E$, cospe  um indíce  que associa cada pessoa um partido  $f: (Pessoa, E) \mapsto \{Esquerda,Direita\}$. Mas como construir essa  $f$?  &lt;strong&gt;Na minha opinião existem três caminhos principais:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Não existe uma única definição formal para comunidade. Esse conceito muda dependendo da abordagem que você escolheu para encontrar as comunidades dentro de cada componente.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;caminho-1-inferir&#34;&gt;&lt;strong&gt;Caminho 1: Inferir&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Pegue por exemplo a distribuição normal. Quando trabalhamos com dados que acreditamos que podem ser modelados por tal distribuição realizamos um processo de ajuste de parâmetros, tentando estimar a média e o desvio padrão da população. A ideia aqui é similar. Propõe-se um modelo capaz de gerar grafos  tendo como restrições um conjunto de parâmetros.. O objetivo é otimizar tais parâmetros tal que o modelo generativo seja um bom candidato para &lt;em&gt;gerador&lt;/em&gt; do grafo original.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O modelo generativo mais famoso é conhecido como &lt;strong&gt;S&lt;/strong&gt;tocahastic  &lt;strong&gt;B&lt;/strong&gt;lock &lt;strong&gt;M&lt;/strong&gt;odel (&lt;strong&gt;SBM&lt;/strong&gt;).  Em português, Modelo de Bloco Estocástico. Usando o networkx você pode gerar uma amostra de um grafo através desse modelo usando o seguinte código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import networkx as nx
import matplotlib.pyplot as plt

# esses são os parâmetros que definiram o número de indivíduos 
# dentro de cada comunidade
n1, n2, n3 = 30, 40, 60
# esses são os parâmetros que definem a probabilidade
# de conexão entre indivíduos da mesma comunidade
p11, p22, p33 = 0.4, 0.3, 0.7
# esses são os parâmetros que definem a probabilidade
# de conexão entre indivíduos de comunidades distintas
p12 = .01
p13 = .1
p23 = .01

sizes = [n1, n2, n3]
probs = [[p11, p12, p13], [p12, p22, p23], [p13, p23, p33]]

g_sbm = nx.stochastic_block_model(sizes, probs, seed=0)
W = nx.adjacency_matrix(g_sbm).todense()

plt.imshow(W)
plt.show()
&lt;/code&gt;&lt;/pre&gt;





  
  











&lt;figure id=&#34;figure-a-matriz-de-adjacência-todos-os-pesos-são-1-do-grafo-gerado-por-nosso-modelo&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/adj_sbm_hueb053748435c7d9559526a97c502365f_19313_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;A matriz de adjacência (todos os pesos são 1) do grafo gerado por nosso modelo.&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/adj_sbm_hueb053748435c7d9559526a97c502365f_19313_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;286&#34; height=&#34;280&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A matriz de adjacência (todos os pesos são 1) do grafo gerado por nosso modelo.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;A ideia de inferência de métodos que usam  SBM  de forma geral é a seguinte:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extraia o conjunto de arestas, $E$, de um grafo qualquer: uma rede social, uma rede de transações financeiras, etc.&lt;/li&gt;
&lt;li&gt;Pegue um SBM, tente estimar o número de partições, probabilidade de conexões intra e entre grupos e em qual bloco cada vértice pertence tal que os grafos gerados pelo SBM melhor represente o seu grafo original.  No final, você tem uma maneira de identificar com cada vértice uma comunidade (partição).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O SBM é poderoso e ao contrário dos outros métodos te fornece uma maneira de checar a qualidade das comunidades encontradas. Isto é, se fazem sentido ou só são frutos de algo aleatório. Contudo, por ser uma técnica mais recente com uma implementação  difícil, não são todas as bibliotecas que fornecem esse recurso. A biblioteca mais famosa para SBM é o 
&lt;a href=&#34;https://graph-tool.skewed.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graph Tool&lt;/a&gt; que consegue estimar comunidades para  grafos com centenas de milhares de vértices. Não poderei discorrer mais ou mostrar como usar o SBM pois é um tema bem  complexo, tema para um post separado.  Mas o importante agora é você ter conseguido absorver pelo menos a ideia.&lt;/p&gt;
&lt;h5 id=&#34;caminho-2-quantificardescrever&#34;&gt;&lt;strong&gt;Caminho 2: Quantificar&lt;/strong&gt;/Descrever&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Você  parte de uma função $f$ qualquer. Exemplo, $f$ é uma função que identifica todo mundo como esquerda ou direita, um sorteio aleatório, etc.&lt;/li&gt;
&lt;li&gt;Com tal identificação você estipula uma grandeza que vai mensurar o quão forte é a coesão entre as pessoas de cada grupo e quão fraca é entre os grupos. Um exemplo de grandeza que mensura isso é a &lt;strong&gt;modularidade&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Você irá alterar a sua $f$ tentando maximizar tal grandeza.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O networkx por exemplo possui um método de maximização de modularidade usando um algoritmo guloso. Vamos usar o grafo gerado pelo sbm para testar esse método usando o seguinte script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from networkx.algorithms import community

def find_where(n, p):
    return [i for i in range(len(p)) if n in p[i]][0]

def plot(g, community_index, p):
    labels = [chr(ord(&#39;A&#39;) + i) for i in range(len(p))]

	plt.scatter(range(len(g.nodes)), community_index)
    plt.ylabel(&#39;Community&#39;)
    plt.xlabel(&#39;Vertex Id&#39;)
    plt.yticks(range(len(p)), labels)
    plt.show()

p = community.greedy_modularity_communities(g_sbm)
g_sbm_community_index = [find_where(n, p) for n in g_sbm.nodes]
print(f&amp;quot;Found {len(set(g_sbm_community_index))} communities&amp;quot;)

plot(g_sbm, g_sbm_community_index, p)
&lt;/code&gt;&lt;/pre&gt;





  
  











&lt;figure id=&#34;figure-resultado-da-identificação-de-comunidades-usando-o-algoritmo-guloso-parece-ok&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/modularity_sbm_hu232f725335f418633017afb243ed9c06_2880_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;Resultado da identificação de comunidades usando o algoritmo guloso. Parece Ok&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/modularity_sbm_hu232f725335f418633017afb243ed9c06_2880_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;380&#34; height=&#34;265&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Resultado da identificação de comunidades usando o algoritmo guloso. Parece Ok
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Temos um resultado muito bom. Mas será que podemos empregar isso em qualquer caso? Vejamos o que acontece quando aplicamos o mesmo algoritmo para um grafo aleatório.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# erdos_reyni é um modelo de grafo aleatório
g = nx.erdos_renyi_graph(150, 0.1, seed=0)
p = community.greedy_modularity_communities(g)
g_community_index = [find_where(n, p) for n in g.nodes]
plot(g, g_community_index, p)
&lt;/code&gt;&lt;/pre&gt;





  
  











&lt;figure id=&#34;figure-resultado-da-identificação-de-comunidades-usando-o-algoritmo-guloso-para-o-modelo-er&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/modularity_er_hu5a3fc90699528d500dae239de7f4b909_3810_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;Resultado da identificação de comunidades usando o algoritmo guloso para o modelo ER.&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/modularity_er_hu5a3fc90699528d500dae239de7f4b909_3810_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;380&#34; height=&#34;265&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Resultado da identificação de comunidades usando o algoritmo guloso para o modelo ER.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;O algoritmo guloso encontrou 4 comunidades e o ponto ruim é que não temos como saber o quão confiável é essa resposta. Mas podemos dizer que provavelmente ela não deveria ser usada pois partimos de um modelo de grafo aleatório.&lt;/p&gt;
&lt;p&gt;Devemos tomar muito cuidado com métodos de detecção por maximização de modularidade e similares. Recomendo ver alguns trabalhos sobre modelos de bloco estocástico, especialmente os feitos pelo Tiago Peixoto.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;New blog post! This time, on something tame and uncontroversial:&lt;br&gt;&lt;br&gt;&amp;quot;Modularity maximization considered harmful&amp;quot;&lt;br&gt;&lt;br&gt;It&amp;#39;s the most popular method used for community detection. It is also one of the most problematic. 1/11&lt;br&gt;&lt;br&gt;(Based on &lt;a href=&#34;https://t.co/iCxFjKOIT1&#34;&gt;https://t.co/iCxFjKOIT1&lt;/a&gt;)&lt;a href=&#34;https://t.co/IRdCFwttQL&#34;&gt;https://t.co/IRdCFwttQL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tiago Peixoto (@tiagopeixoto) &lt;a href=&#34;https://twitter.com/tiagopeixoto/status/1467798790346260484?ref_src=twsrc%5Etfw&#34;&gt;December 6, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Métodos de detecção de comunidade usando modularidade (Gelphi) são úteis. Contudo, podemos identificar comunidades mesmo no caso de um grafo totalmente aleatório! Tome cuidado.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;caminho-3-visualizar&#34;&gt;&lt;strong&gt;Caminho 3: Visualizar&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Você utiliza um método que mapeia  cada vértice do seu grafo em um espaço vetorial. Por exemplo &lt;strong&gt;t-sne&lt;/strong&gt;, &lt;strong&gt;UMAP&lt;/strong&gt;, &lt;strong&gt;force-directed&lt;/strong&gt;, &lt;strong&gt;spectral embedding&lt;/strong&gt; etc. Com sua visualização você realiza uma inspeção (totalmente subjetiva!)  para identificar as comunidades (agrupamentos). Em alguns casos é aceitável realizar um k-means nesse espaço para encontrar os &lt;em&gt;clusters&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O script abaixo gera uma visualização dos dois grafos usados nos exemplos anteriores: um obtido do SBM e outro do Erdos-Renyi.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

pos_sbm = np.array([ v for v in nx.layout.spring_layout(g_sbm, iterations=1000).values()])
pos = np.array([ v for v in nx.layout.spring_layout(g, iterations=1000).values()])
fig, (a1, a2) = plt.subplots(1, 2)

a1.scatter(pos_sbm[:, 0], pos_sbm[:, 1], c=g_sbm_community_index, cmap=&#39;tab20&#39;)
a2.scatter(pos[:, 0], pos[:, 1], c=g_community_index, cmap=&#39;tab20&#39;)
for ax in (a1, a2):
    ax.set_yticklabels([])
    ax.set_xticklabels([])
a1.set_title(&#39;SBM&#39;)
a2.set_title(&#39;ER&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;





  
  











&lt;figure id=&#34;figure-visualização-via-force-directed-para-uma-amostra-de-um-sbm-e-outra-erdos-renyi-cores-representam-as-comunidades-identificadas-pelo-método-guloso-de-maximização-de-modularidade&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/fd_sbm_and_er_hudae8c8a39de2754d2a986f6769de4dd6_25660_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;Visualização via force-directed para uma amostra de um SBM e outra Erdos-Renyi. Cores representam as comunidades identificadas pelo método guloso de maximização de modularidade&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/fd_sbm_and_er_hudae8c8a39de2754d2a986f6769de4dd6_25660_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;349&#34; height=&#34;248&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Visualização via force-directed para uma amostra de um SBM e outra Erdos-Renyi. Cores representam as comunidades identificadas pelo método guloso de maximização de modularidade
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Note que o método de visualização mostrou um agrupamento de vértices para o SBM. Contudo, no caso do grafo aleatório (ER) só parece uma grande confusão. As cores representam as comunidades obtidas via maximização da modularidade. O que podemos tirar desse exemplo? Que você deve tomar cuidado quando falar que encontrou uma comunidade ou que existe uma &lt;em&gt;“bolha”&lt;/em&gt;  na rede social que você encontrou. Outra coisa que isso nos mostra é que usar métodos diferentes é uma boa alternativa para evitar ser enganado por seus resultados.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    No caso de visualizações de grafos, especialmente de force-directed, talvez seja melhor você utilizar algum sistema de visualização iterativo e 3D.  Visualizações em 2D obtidas pelo force-directed podem não ser de grande ajuda e ainda ficarem presas em alguma configuração não ótima.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Tome cuidado ao interpretar um grafo usando apenas métodos  de visualização como force-directed, force-atlas, etc. Lembre que temos a tendência a reconhecer padrões  baseado em agrupamentos, contraste etc. A &lt;a href=&#34;#gestalt&#34;&gt;Gestalt&lt;/a&gt; também atua para nos enganar.  Você pode  estar sujeito a &lt;a href=&#34;https://en.wikipedia.org/wiki/Pareidolia&#34;&gt;pareidolia&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;O tema de comunidades merece alguns posts separados para cada caminho, pois é um assunto denso e com muitos métodos diferentes.&lt;/p&gt;
&lt;h2 id=&#34;filtros&#34;&gt;Filtros&lt;/h2&gt;
&lt;h3 id=&#34;estrutural-threshold&#34;&gt;Estrutural: threshold&lt;/h3&gt;
&lt;p&gt;O método de threshold é um método estrutural, isto é, um método de filtragem que depende apenas dos pesos e das arestas. Com certeza,  é o método mais simples e mais rápido, embora o mais controverso. É aplicável somente se cada relação  (aresta) possuir um número real associado. O método de threshold consiste em descartar qualquer aresta cuja o peso ultrapasse um dado valor.&lt;/p&gt;
&lt;p&gt;O método de threshold é muito utilizado em neurociência (com  críticas) e para análise de dados em  geral quando as arestas representam uma medida de correlação (Pearson) entre dois elementos. Como as medidas de correlações podem ser negativas é comum que o threshold seja aplicado no absoluto dos valores associados às arestas.&lt;/p&gt;
&lt;p&gt;Tome o seguinte grafo como exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
  A--&amp;gt;|-0.5|B;
  B--&amp;gt;|0.4|C
  C--&amp;gt;|2|A;
  D--&amp;gt;|-1|C;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ao realizar um threshold de $0.5$ iremos remover a relação $(B, C)$ e $(A, B)$. O grafo não é mais fortemente conectado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
  C--&amp;gt;|2|A;
  D--&amp;gt;|-1|C;
  B;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É comum que após o threshold todas as arestas que sobraram sejam truncadas em $1$. Ficaríamos com algo assim no final:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
  C--&amp;gt;|1|A;
  D--&amp;gt;|1|C;
  B;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uma das maiores limitações/perigo de se usar o método um &lt;em&gt;naive threshold&lt;/em&gt; é que em grafos que modelam situações do mundo real  (seja ele direto ou não) a distribuição de pesos costuma seguir uma fat-tail e distorcida tal como essa aqui:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-distribuição-de-probabilidade-dos-pesos-das-arestas-em-função-do-peso-note-que-poucas-arestas-tem-um-peso-relevante-fonte-extracting-the-multiscale-backbone-of-complex-weighted-networkshttpsarxivorgabs09042389&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/fat_tail_hua90d0707a945e6e9d352ed2f3ab43782_45362_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;Distribuição de probabilidade dos pesos das arestas em função do peso. Note que poucas arestas tem um peso relevante. Fonte: &amp;lt;em&amp;gt;&amp;lt;a href=&amp;#34;https://arxiv.org/abs/0904.2389&amp;#34;&amp;gt;Extracting the multiscale backbone of complex weighted networks&amp;lt;/a&amp;gt;&amp;lt;/em&amp;gt;&#34;&gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/fat_tail_hua90d0707a945e6e9d352ed2f3ab43782_45362_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;540&#34; height=&#34;372&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Distribuição de probabilidade dos pesos das arestas em função do peso. Note que poucas arestas tem um peso relevante. Fonte: &lt;em&gt;&lt;a href=&#34;https://arxiv.org/abs/0904.2389&#34;&gt;Extracting the multiscale backbone of complex weighted networks&lt;/a&gt;&lt;/em&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Bom, o que acontece se você tentar passar um threshold no grafo que tem uma distribuição parecida com essa na imagem? Vai ser difícil. Qualquer valor um pouco maior criará um monte de componentes desconectados. Além do que, como você justificaria seu valor de threshold ? Não dá para falar um argumento dois desvios padrões a partir da média. Se fosse uma distribuição normal de pesos você poderia estar bem.&lt;/p&gt;
&lt;p&gt;O threshold tem outro problema, ele é local. Isto é,  você poderia penalizar muito as arestas de uma comunidade e nada de outra. Para deixar isso mais claro veja o exemplo de grafo com pesos a seguir:&lt;/p&gt;
&lt;div class=&#34;mermaid mermaidContainer&#34;&gt;
graph LR;
  *---|0.4|1;
  1---|0.8|2;
  3---|0.4|2;
  1---|0.6|3;
  1---|0.6|4;
  4---|0.3|3;
  4---|...|...;
  1---|...|...;
  *---|0.4|a;
  a---|1|b;
  a---|0.8|c;
  a---|0.8|d;
  c---|0.7|e;
  b---|0.7|f;
  d---|0.8|g;
  g---|...|?_1;
  f---|...|?_2;
  e---|...|?_3;
  b---|0.3|c;
  c---|0.3|d;
&lt;/div&gt;
&lt;p&gt;Se aplicássemos um threshold em $0.5$ teríamos algo do tipo&lt;/p&gt;
&lt;div class=&#34;mermaid mermaidContainer&#34;&gt;
graph LR;
  *;
  1---2;
  1---3;
  1---4;
  4---|...|...;
  1---|...|...;
  a---b;
  a---c;
  a---d;
  c---e;
  b---f;
  d---g;
  g---|...|?_1;
  f---|...|?_2;
  e---|...|?_3;
&lt;/div&gt;
&lt;p&gt;Produzindo 3 componentes no nosso grafo se alterássemos ligeiramente o threshold produziremos mais componentes ainda.  Ele é muito sensível. Qual o problema disso?  Se fossemos aplicar um algoritmo de detecção de comunidades teríamos que fazer isso para cada componente. Em uma rede social isso pode ser problemático porque já estaremos analisando “bolhas” isoladas. Então como proceder? Portanto, vocẽ pode até usar o threshold para encontrar as arestas que são a &lt;strong&gt;sustentação&lt;/strong&gt; para o grafo. &lt;em&gt;A espinha dorsal do grafo, backbone&lt;/em&gt;.  Contudo, ele costuma falhar.&lt;/p&gt;
&lt;h4 id=&#34;pontos-positivos&#34;&gt;Pontos positivos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;custo computacional baixo $O(n)$
&lt;ul&gt;
&lt;li&gt;apenas iterar e comparar os valores.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;paralelizável&lt;/li&gt;
&lt;li&gt;trivial de implementar&lt;/li&gt;
&lt;li&gt;apenas um parâmetro&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pontos-negativos&#34;&gt;Pontos negativos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;tendência de produzir muitas componentes desconectadas,&lt;/li&gt;
&lt;li&gt;parâmetro arbitrário,
&lt;ul&gt;
&lt;li&gt;cherry-picking.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A remoção de uma aresta só depende do valor atribuído a ela. Isto é, local.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;considerações-finais&#34;&gt;Considerações finais&lt;/h5&gt;
&lt;p&gt;Outros métodos estruturais como o &lt;em&gt;high-salience network&lt;/em&gt;  tentam reduzir os problemas do threshold adicionando contribuições não locais. Isto é, uma aresta é  mantida/removida dependendo também das outras arestas no grafo. Contudo, como o &lt;em&gt;high-salience network&lt;/em&gt; É um filtro definido pelos menores caminhos no grafo ele costuma ser adequado apenas para grafos que esse conceito de filtragem é útil, por exemplo grafos que modelam infraestrutura de transporte.&lt;/p&gt;
&lt;h3 id=&#34;estatistico&#34;&gt;Estatístico: quebrando a varinha, processo de Dirichlet&lt;/h3&gt;
&lt;p&gt;Métodos estatísticos têm uma abordagem mais generalista quando comparados aos estruturais. Pois métodos estatísticos não dependem de algum conceito direto como caminhos mínimos usados pelo &lt;em&gt;high-salience network&lt;/em&gt; para redes de infraestrutura.&lt;/p&gt;
&lt;p&gt;Um método estatístico muito usado para filtrar arestas faz uso do 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Dirichlet_process&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;processo  estocástico de Dirichlet&lt;/a&gt;. Intuitivamente, podemos usar esse processo  para modelar uma situação que temos uma varinha e vamos quebrando ela em $k$ pedaços e queremos descobrir a probabilidade de um pedaço de tamanho $p$ aparecer no processo, &lt;em&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Dirichlet_process#The_stick-breaking_process&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stick-breaking process&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    O processo de Dirichlet foi redescoberto  em 2009 com o nome de &lt;strong&gt;filtro de disparidade&lt;/strong&gt;. Embora os autores do filtro de disparidade não citem trabalhos prévios ou o próprio processo Dirichlet em si.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Certo, vamos tentar entender como usar esse processo para filtrar arestas.&lt;/p&gt;
&lt;p&gt;Começamos definindo  os pesos efetivos para &lt;strong&gt;cada vértice&lt;/strong&gt; e aresta.  Esse  peso efetivo para uma aresta entre os vértices &lt;strong&gt;A&lt;/strong&gt; e &lt;strong&gt;B&lt;/strong&gt; é dado pela seguinte expressão:
$$
p_{AB} = \frac{Peso\ da\ aresta\ (A,B)}{Soma\ dos\ pesos\ de\ todas\ as\ arestas\ de\ A}
$$
$$
p_{AB}= \frac{w_{AB}}{\sum\limits_C w_{AC}}
$$&lt;/p&gt;
&lt;p&gt;Pegue o grafo a seguir com os pesos dados nas arestas&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
A---|1|B;
B---|1|C;
A---|2|C;
A---|4|D;
D---|1|C;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculando o peso efetivo para todas as arestas relacionadas ao vértice &lt;strong&gt;A&lt;/strong&gt;.  É fácil  ver que&lt;/p&gt;
&lt;p&gt;$p_{AB} =1/7$, $p_{AC}=2/7$, e $p_{AD}=4/7$ e claro que $\sum_B p_{AB}=1$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
A---|1/7|B;
B---C;
A---|2/7|C;
A---|4/7|D;
D---C;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Iremos decidir se removeremos alguma ou mais  arestas de &lt;strong&gt;A&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nossos pesos efetivos somam   1. A ideia do filtro é imaginar que os pesos efetivos são influências do vértice &lt;strong&gt;A&lt;/strong&gt; nos seus vizinhos. O modelo  parte da hipótese que os pesos efetivos são distribuídos de forma uniforme entres os vizinhos de &lt;strong&gt;A&lt;/strong&gt;.  Portanto, &lt;strong&gt;podemos modelar a distribuição de pesos nas três arestas de A  como um 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Dirichlet_process#The_stick-breaking_process&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stick-breaking process&lt;/a&gt;&lt;/strong&gt;. Desta maneira, podemos escolher remover as arestas cujo os pesos efetivos tenham uma probabilidade maior de ter vindo desse processo. Estamos mantendo os pesos efetivos dispares do processo!&lt;/p&gt;
&lt;p&gt;Ok, como fazer isso? Como os pesos efetivos podem ter qualquer valor entre 0 e 1 precisamos de uma densidade de probabilidade. O stick-breaking deve modelar um processo de quebra de um graveto em $k$ pedacinhos. No nosso caso, os $k$ pedacinhos são as $3$ arestas de &lt;strong&gt;A&lt;/strong&gt;. Então a densidade de probabilidade precisa  ter $k$ como parâmetro.&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/edge_graph_filtering/dirichet_disparity_hu96ca0e2ae94d6035ae4226a77316451b_94065_2000x2000_fit_q90_lanczos.jpeg&#34; &gt;


  &lt;img data-src=&#34;/post/edge_graph_filtering/dirichet_disparity_hu96ca0e2ae94d6035ae4226a77316451b_94065_2000x2000_fit_q90_lanczos.jpeg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;671&#34; height=&#34;457&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Demonstrar a densidade de probabilidade desse processo de quebra é trabalhoso, mas a expressão final é bem simples. São funções decrescentes que caem mais rápido quanto maior  o $k$. O que faz sentido, já que quanto mais pedacinhos quebrarmos menos provável é achar um pedacinho com um tamanho próximo do original do graveto.&lt;/p&gt;
&lt;p&gt;A filtragem via stick-breaking (disparidade) baseia-se então em remover somente as arestas cujo os pesos efetivos são mais prováveis (um p-teste)  dado um fator $\alpha$ , um número real entre 0 e 1. Isto é, a aresta AB é mantida se a inequação abaixo é verificada:
$$
(1-p_{AB})^{k_A-1} &amp;lt; \alpha
$$&lt;/p&gt;
&lt;p&gt;A tabela abaixo mostra o que acontece com as arestas de $A$ a medida que o parâmetro $\alpha$ é alterado&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Aresta/$\alpha$&lt;/th&gt;
&lt;th&gt;0. 19&lt;/th&gt;
&lt;th&gt;0.52&lt;/th&gt;
&lt;th&gt;0.74&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A,B&lt;/td&gt;
&lt;td&gt;Removida&lt;/td&gt;
&lt;td&gt;Removida&lt;/td&gt;
&lt;td&gt;Mantida&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A,C&lt;/td&gt;
&lt;td&gt;Removida&lt;/td&gt;
&lt;td&gt;Mantida&lt;/td&gt;
&lt;td&gt;Mantida&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A,D&lt;/td&gt;
&lt;td&gt;Mantida&lt;/td&gt;
&lt;td&gt;Mantida&lt;/td&gt;
&lt;td&gt;Mantida&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;OK, parece muito bom. Mas veja o seguinte: ressaltei várias vezes &lt;strong&gt;A&lt;/strong&gt; no texto. Isto  por que o filtro é definido por vértice. Bom, e o que acontece se olharmos a partir do vértice &lt;strong&gt;B&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Partindo de $B$ teremos $p_{BC}=1/2$ e $p_{BA}=1/2$!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
A---|1/2|B;
B---|1/2|C;
A---C;
A---D;
D---C;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Então  $(1-p_{BA})^{k_b-1} = (1-1/2)^1 = 1/2$. Ok , então se escolhermos $\alpha$ igual 0.52 a tabela anterior (para &lt;strong&gt;A&lt;/strong&gt;) diz para remover a aresta (A,B) enquanto  por &lt;strong&gt;B&lt;/strong&gt; o método nos diz que é para manter. Isso causa uma  ambiguidade em como decidir se vamos manter ou não as arestas. Você pode escolher manter se os dois concordam ou manter se apenas um passar no teste.  &lt;strong&gt;Essa ambiguidade não aparece no caso de grafos direcionados!&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;pontos-positivos-1&#34;&gt;Pontos positivos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;é estabelecido dentro de uma formalização matemática robusta&lt;/li&gt;
&lt;li&gt;tenta evitar que o grafo se desconecte&lt;/li&gt;
&lt;li&gt;custo computacional baixo&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pontos-negativos-1&#34;&gt;Pontos negativos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;podemos argumentar que o teste de hipótese é arbitrário&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parâmetro $\alpha$ precisa ser escolhido, embora mais robusto do que apenas o parâmetro de threshold&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;extras&#34;&gt;Extras:&lt;/h2&gt;
&lt;p&gt;O próximo exemplo é sobre&lt;/p&gt;
&lt;h3 id=&#34;matrizes-e--espectro&#34;&gt;Matrizes e  espectro&lt;/h3&gt;
&lt;p&gt;Pegue o seguinte grafo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
  A---|1|B;
  B---|1/2|C;
  C---|2|A;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos associar com esse grafo uma matriz $3\times 3$ onde as entradas da matriz representam os valores associados às arestas. Essa matriz é conhecida como matriz de pesos,&lt;/p&gt;
&lt;p&gt;$$
W=\begin{pmatrix}
- &amp;amp; A &amp;amp; B &amp;amp; C\\
A &amp;amp; 0 &amp;amp; 1 &amp;amp; 2\\
B &amp;amp; 1 &amp;amp; 0 &amp;amp; 1/2\\
C &amp;amp; 2 &amp;amp; 1/2 &amp;amp; 0
\end{pmatrix}
$$&lt;/p&gt;
&lt;p&gt;$$
v=\begin{pmatrix}
x\\
y\\
z
\end{pmatrix}
$$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
  A[y+2z]---|1|B;
  B[x+1/2z]---|0.5|C;
  C[2x+0.5y]---|2|A;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A matriz pesos de um grafo pode ser pensada como uma generalização para combinar valores numéricos.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href=&#34;/post/random_matrix_portfolio&#34;&gt;Variações do teorema do limite central para matrizes aleatórias&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;filtro-espectral-amostragem&#34;&gt;Filtro Espectral (amostragem)&lt;/h3&gt;
&lt;p&gt;$(1-\epsilon)v^TLv \le v^TLv  \le (1+\epsilon)v^T Lv$&lt;/p&gt;
&lt;h4 id=&#34;pontos-positivos-2&#34;&gt;Pontos positivos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;é estabelecido dentro de uma formalização matemática robusta&lt;/li&gt;
&lt;li&gt;dada as restrições garante preservar as propriedades estabelecidas&lt;/li&gt;
&lt;li&gt;muito utilizado para processamento de sinais em grafos&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pontos-negativos-2&#34;&gt;Pontos negativos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;custo computacional geralmente elevado
&lt;ul&gt;
&lt;li&gt;alguns métodos espectrais tem custo $O(n^2)$ para cada iteração&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;muitas maneiras distintas de fazer para cada tipo de grafo e objetivo.
&lt;ul&gt;
&lt;li&gt;Se o grafo for direcionado ou não, se é livre de escala ou não, se tem um certo padrão específico de conexões, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Variações do teorema central do limite para matrizes aleatórias.</title>
      <link>/post/random_matrix_portfolio/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/post/random_matrix_portfolio/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Disponível em 
&lt;a href=&#34;https://opencodecom.net/post/2021-12-14-variacoes-do-teorema-central-do-limite-para-matrizes-aleatorias-de-nucleos-atomicos-a-filtragem-de-matrizes-de-correlaca/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://opencodecom.net/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No célebre trabalho “&lt;em&gt;Can One Hear the Shape of a Drum?&lt;/em&gt;”[1] Kack questiona se conhecendo o espectro (&lt;em&gt;som&lt;/em&gt;) de um certo operador que define as oscilações de uma membrana (&lt;em&gt;tambor&lt;/em&gt;) seria possível identificar o formato de tal membrana de maneira unívoca. Discutiremos aqui como é possível ouvir matrizes de correlação usando seu espectro e como podemos remover o ruído desse som usando resultados da teoria de matrizes aleatórias. Veremos como essa filtragem pode aprimorar algoritmos de construção de carteiras de investimentos.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Minhas motivações para escrever esse texto foram o movimento 
&lt;a href=&#34;https://twitter.com/sseraphini/status/1458169250326142978&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learn In Public-Sibelius Seraphini&lt;/a&gt; e o Nobel de Física de 2021. Um dos temas de Giorgio Parisi  é o estudo de matrizes aleatórias 
&lt;a href=&#34;https://www.nobelprize.org/uploads/2021/10/sciback_fy_en_21.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.nobelprize.org 2021&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jupyter notebook disponível 
&lt;a href=&#34;https://github.com/devmessias/devmessias.github.io/blob/master/content/post/random_matrix_portfolio/index.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aqui&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-introdução-teorema-central-do-limite&#34;&gt;1-Introdução: teorema central do limite&lt;/h1&gt;
&lt;p&gt;O teorema central do limite está no coração da análise estatística. Em poucas palavras o mesmo estabelece o seguinte.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suponha uma amostra $A = (x_1, x_2, \dots, x_n)$ de uma variável aleatória com média $\mu$ e variância $\sigma^2$ finita. Se a amostragem é $i.i.d.$ o teorema central do limite estabelece que a
distribuição de probababilidade da média amostral converge
para uma distribuição normal com variância $\sigma^2/n$ e média $\mu$ a medida que $n$ aumenta.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note que eu não disse nada a respeito de como tal amostra foi gerada; em nenhum momento citei distribuição de Bernoulli, Gauss, Poisson, etc. Desta maneira podemos dizer que tal convergência é uma propriedade &lt;strong&gt;universal&lt;/strong&gt; de amostras aleatórias $i.i.d.$. Essa universalidade é poderosa, pois  garante que é possível estimar a média e variância de uma população  através de um conjunto de amostragens.&lt;/p&gt;
&lt;p&gt;Não é difícil fazer um experimento computacional onde a implicação desse teorema apareça&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import warnings
from matplotlib import style

warnings.filterwarnings(&#39;ignore&#39;)
style.use(&#39;seaborn-white&#39;)

np.random.seed(22)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usaremos uma amostragem de uma distribuição exponencial com média $\mu = 4$. Tal distribuição tem uma variância dada por $1/\mu^2$. Faremos $10000$ experimentos com amostras de tamanho $500$. Posteriormente calcularemos a media de cada experimento, &lt;code&gt;mean_by_exp&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rate = 0.25

mu = 1/rate

sample_size=500
exponential_sample = np.random.exponential(mu, size=(sample_size, 30000))
mean_by_exp = exponential_sample.mean(axis=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora basta plotar o histograma em comparação com a distribuição normal dada pelo teorema central do limite&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(mean_by_exp, norm_hist=True, label=&#39;sample&#39;)
x = np.linspace(2.5, 5.5, 100)
var = mu**2/(sample_size)
y = np.exp(-(x-mu)**2/(2*var))/np.sqrt(2*np.pi*var)
plt.plot(x, y, label=r&#39;$N(\mu, \sigma)$&#39;, c=&#39;tomato&#39;)
plt.legend()
plt.xlim(3., 5)
plt.savefig(&#39;exponential_distribution.png&#39;, facecolor=&#39;w&#39;)
plt.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;exponential_distribution.png&#34; alt=&#34;&amp;ldquo;exponential_distribution.png&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note  na figura acima que o plot para a função $\frac{e^{-\frac{(x-\mu)^2}{2\sigma^2}}}{\sqrt(2\pi\sigma^2)}$ e o histograma coincidem.  Você pode testar essa coincidência com outras distribuições, o mesmo comportamento se repetira. É isso que quero dizer com &lt;strong&gt;universalidade&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Um questionamento válido é que estamos tratando apenas de uma variável aleatória e sua amostragem. Mas no mundo real existem outras estruturas mais intricadas. Por exemplo
pegue um conjunto de variáveis aleatórias
$\mathcal C=(X_{1 1}, X_{1 2}, \cdots, X_{N N})$,  suponha que exista uma certa &lt;strong&gt;simetria&lt;/strong&gt; nesse conjunto, uma possibilidade é $X_{i j} = X_{j i}$.
Não é difícil imaginar situações onde tal conjunto apareça.&lt;/p&gt;
&lt;p&gt;Podemos armazenar uma realização de $\mathcal C$ em uma matriz que nada mais é que um grafo completo com pesos. Ao estudar essas matrizes oriundas desse tipo de amostragem entramos em um novo campo da matemática, o campo das matrizes aleatórias.
Nesse campo de estudos uma amostragem não retorna um número, mas sim uma matriz.&lt;/p&gt;
&lt;p&gt;A função &lt;code&gt;normalRMT&lt;/code&gt; apresentada abaixo é um gerador de matrizes aleatórias conhecidas como Gaussianas ortogonais.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def normalRMT(n=100):
    &amp;quot;&amp;quot;&amp;quot;Generate a random matrix with normal distribution entries
    Args:
        n : (int) number of rows and columns
    Returns:
        m : (numpy.ndarray) random matrix

    &amp;quot;&amp;quot;&amp;quot;
    std = 1/np.sqrt(2)
    m = np.random.normal(size=(n,n), scale=std)
    m = (m+m.T)
    m /= np.sqrt(n)
    return m
np.set_printoptions(precision=3)
print(f&#39;{normalRMT(3)},\n\n{normalRMT(3)}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[-1.441e+00 -2.585e-01 -1.349e-01]
 [-2.585e-01 -2.304e-01  1.166e-03]
 [-1.349e-01  1.166e-03 -1.272e+00]],

[[-0.742  0.607 -0.34 ]
 [ 0.607  0.678  0.277]
 [-0.34   0.277 -0.127]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sabemos que quando estamos trantando de variáveis aleatórias  o teorema central do limite é importantíssimo. O que você pode se perguntar agora é: &lt;strong&gt;Existe um análogo para o teorema central do limite para matrizes aleatórias?&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-núcleos-atômicos-gás-de-números-primos-e-universalidade&#34;&gt;2-Núcleos atômicos, gás de números primos e universalidade&lt;/h1&gt;
&lt;p&gt;Para o bem e para o mal o conhecimento da física atômica foi um dos temas mais importantes desenvolvidos pela humanidade. Portanto, não é de se estranhar que após o ano de 1930 iniciou-se uma grande corrida para compreender núcleos atômicos pesados e a física de nêutrons [13].&lt;/p&gt;
&lt;p&gt;Para compreender essa nova física de nêutrons era necessário conhecer a organização do  espectro de ressonância dos núcleos pesados (esse espectro nada mais é que os autovalores de um operador muito especial). Uma maneira de se fazer isso é do jeito que muitas das coisas são estudadas na física: pegando se uma coisa  e jogando na direção da coisa a ser estudada. Essa metodologia experimental torna possível amostrar alguns valores possíveis para o espectro. Contudo, acredito que não preciso argumentar que fazer isso naquela época era extremamente difícil e caro. Poucos centros conseguiam realizar alguns experimentos e ainda com uma resolução muito baixa para obter resultados suficientes para uma compreensão adequada dos núcleos. Era preciso uma saída mais barata e ela foi encontrada. Tal saída dependeu apenas de física-matemática e maços de papel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;frog.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dentre os pioneiros que decidiram atacar o problema de núcleos pesados usando matemática temos Eugene Paul Wigner (Nobel de 1963).  A grande sacada de Wigner foi perceber que o fato das interações nucleares serem tão complicadas e a infinitude de graus de liberdade seria possível tentar compreender essas interações como uma amostragem sujeita a certas condições de simetria.[10 , 11]&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;wigner.png&#34; alt=&#34;wigner.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Aqui com simetria queremos dizer que as matrizes envolvidas possuem certas restrições tais como&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.assert_equal(A, A.T)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Na próxima seção veremos qual o impacto dessas restrições na distribuição de autovalores das matrizes envolvidas.&lt;/p&gt;
&lt;h2 id=&#34;2-a-universalidade-e-lei-do---semicírculo&#34;&gt;2-a) Universalidade e lei do   semicírculo&lt;/h2&gt;
&lt;p&gt;A função &lt;code&gt;normalRMT&lt;/code&gt; gera uma matriz simétrica onde as entradas são extraídas de uma distribuição normal. A função &lt;code&gt;laplaceRMT&lt;/code&gt; gera também uma matriz simétrica, contudo as entradas são amostras de uma distribuição de Laplace.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
def laplaceRMT(n=100):
    &amp;quot;&amp;quot;&amp;quot;Generate a random matrix with Laplace distribution
    Args:
        n : (int) size of the matrix
    Returns:
        m : (numpy.ndarray) random matrix with Laplace distribution

    &amp;quot;&amp;quot;&amp;quot;
    # we know that the variance of the laplace distribution is 2*scale**2
    scale = 1/np.sqrt(2)
    m = np.zeros((n,n))

    values = np.random.laplace(size=n*(n-1)//2, scale=scale)
    m[np.triu_indices_from(m, k=1)] = values
    # copy the upper diagonal to the lower diagonal
    m[np.tril_indices_from(m, k=-1)] = values 
    np.fill_diagonal(m, np.random.laplace(size=n, scale=scale))
    m = m/np.sqrt(n)
    return m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As propriedades &lt;strong&gt;universais&lt;/strong&gt; que iremos explorar aqui estão ligadas aos autovalores das matrizes que foram amostradas. Como nossas matrizes são simétricas  esses autovalores são todos reais.&lt;/p&gt;
&lt;p&gt;Como cada matriz é diferente os autovalores também serão, eles também são variáveis aleatórias.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;vals_laplace = np.array([
    np.linalg.eigh(laplaceRMT(n=100))[0]
    for i in range(100)
])
vals_normal = np.array([
    np.linalg.eigh(normalRMT(n=100))[0]
    for i in range(100)
])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Na decáda de 50 não havia poder computacional
suficiente para realizar investigações númericas, mas você pode facilmente investigar como os  autovalores se distribuem usando seu computador e gerando os histogramas&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = 1
x  =   np.linspace(-2*t, 2*t, 100)
y =  np.zeros_like(x)
x0 = x[4*t-x*2&amp;gt;0]
y[4*t-x*2&amp;gt;0] = np.sqrt(4*t-x0**2)/(2*np.pi*t)

plt.figure(facecolor=&#39;white&#39;)
plt.hist(vals_laplace.flatten(), bins=50, 
hatch =&#39;|&#39;,
density=True, label=&#39;laplace&#39;, alpha=.2)
plt.hist(vals_normal.flatten(), bins=50,
hatch =&#39;o&#39;, 
density=True, label=&#39;normal&#39;, alpha=.2)
#sns.distplot(vals_laplace, norm_hist=True, label=&#39;Laplace&#39;)
#sns.distplot(vals_normal, norm_hist=True, label=&#39;Normal&#39;)
#sns.distplot(vals2, norm_hist=True, label=&#39;sample2&#39;)
plt.plot(x, y, label=&#39;analytical&#39;)
plt.xlabel(r&#39;$\lambda$&#39;)
plt.ylabel(r&#39;$\rho(\lambda)$&#39;)
plt.legend()
plt.savefig(&#39;RMT_distribution.png&#39;, facecolor=&#39;w&#39;)
plt.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;RMT_distribution.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Veja na figura acima que a distribuição de autovalores de matrizes simétricas  relacionadas com a distribuição normal e de Laplace coincidem. O que estamos vendo aqui é uma propriedade &lt;strong&gt;universal&lt;/strong&gt;! Espero que você acredite em mim, mas dado que você tenha uma matriz aleatória simétrica, quadrada e se as entradas são $i.i.d.$  a distribuição de autovalores seguem o que é conhecido como lei de   semicírculo de Wigner. Se a média e variância das entradas da matriz são  $0$ e $1$  respectivamente, então tal lei tem a seguinte expressão para a distribuição de probabilidade dos autovalores
$$
\rho(\lambda) = \begin{cases}
\frac{\sqrt{4-\lambda^2}}{(2\pi)}  \textrm{ se } 4-\lambda^2 \leq 0\newline
0  \textrm{ caso contrário.}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;Se trocarmos as simetrias, restrições ou formato (&lt;code&gt;array.shape[0]!=array.shape[1]&lt;/code&gt;) das matrizes podemos encontrar variações  da distribuição apresentada acima. Exemplo se a matriz é complexa mas Hermitiana, ou  se é &amp;ldquo;retangular&amp;rdquo; e real tal como algums matrizes que são usadas para otimizar carteiras de investimento. A próxima seção mostrará um caso com outro formato para universalidade.&lt;/p&gt;
&lt;h2 id=&#34;2-b-repulsão-entre-números-primos&#34;&gt;2-b) Repulsão entre números primos&lt;/h2&gt;
&lt;p&gt;Inciamos nosso texto falando sobre como a teoria de matrizes aleatórias floreceu com os estudos estatísticos de núcleos atômicos pesados, especificamente nos trabalhos de Wigner. Embora tenha essa origem, muitas vezes ferramentas matemáticas desenvolvidas apenas por motivações práticas alcançam outros ramos da matemática. Brevemente discutirei aqui alguns pontos e relações com uma das conjecturas mais famosas da matemática: a hipótese de Riemann.&lt;/p&gt;
&lt;p&gt;Qualquer pessoa com alguma curiosidade sobre matemática já ouviu falar sobre a hipótese de Riemann. Essa hipótese estabele uma relação entre os zeros da função zeta de Riemann e a distribuição de números primos.  Dada sua importância os maiores ciêntistas do século XX se debruçaram sobre ela almejando a imortalidade. Um desses ciêntistas foi  Hugh Montgomery[4].&lt;/p&gt;
&lt;p&gt;Por volta de 1970 Montgomery notou que os zeros da função zeta tinham uma certa propriedade cuirosa, pareciam repelir uns aos outros. Uma expressão foi obtidada,  que é a seguinte&lt;/p&gt;
&lt;p&gt;$$
1 - \left( \frac{\sin (\pi u)}{\pi u}\right)^2 + \delta(u)
$$&lt;/p&gt;
&lt;p&gt;Não se preocupe em entender a expressão acima, ela está aqui apenas for motivos estéticos.
O que importa é que ela é simples, tão simples que quando Freeman Dyson  - um dos gigantes da física-matemática - colocou os olhos sobre tal equação ele notou imediatamente que tal equação era idêntica a obtida no contexto de matrizes aleatórias Hermitianas (uma matriz é hermitiana se ela é igual a sua transporta conjugada) utilizadas para compreender o comportamento de núcleos de átomos pesados, tais como urânio. A imagem abaixo é uma carta  escrita por Dyson.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;carta.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As conexão entre um ferramental desenvolvido para estudar núcleos atômicos e números primos era realmente inesperada e talvez seja um dos caminhos para a prova da hipotese de Riemann[5, 2]. Contudo deixemos a história de lado, e voltemos ao ponto principal que é te dar outro exemplo de universalidade.&lt;/p&gt;
&lt;p&gt;Lembra que Montgomery disse que parecia haver uma repulsão entre os zeros da função Zeta? O que seria esse conceito de repulsão em matrizes aleatórias? Vamos checar numericamente&lt;/p&gt;
&lt;p&gt;Voltaremos a usar nossas matrizes aleatórias geradas por distribuições Gaussianas e Laplacianas. Usando o mesmo conjunto de autovalores que obtivemos anteriormente iremos calular o espaçamento entre cada par de autovalores para cada realização de uma matriz aleatória. É bem fácil, basta chamar a função &lt;code&gt;diff&lt;/code&gt; do numpy&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;diff_laplace = np.diff(vals_laplace, axis=1)
diff_normal = np.diff(vals_normal, axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora o que faremos é estimar a densidade de probabilidade usnado KDE. Mas antes disso aqui vai uma dica:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Evite o KDE do sklearn no seu dia a dia, a implementação é lenta e não flexivél. Difícilmente você conseguirá bons resultados com milhões de pontos. Aqui vou usar uma implementação de KDE mais eficiente você pode instalar ela execuntando o comando abaixo&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!pip install KDEpy
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from KDEpy import FFTKDE

estimator_normal = FFTKDE( bw=&#39;silverman&#39;).fit(diff_normal.flatten())
x_normal, probs_normal = estimator_normal.evaluate(100)
mu_normal = np.mean(diff_normal, axis=1).mean()

estimator_laplace = FFTKDE( bw=&#39;silverman&#39;).fit(diff_laplace.flatten())
x_laplace, probs_laplace = estimator_laplace.evaluate(100)
mu_laplace = np.mean(diff_laplace, axis=1).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;goe_law = lambda x: np.pi*x*np.exp(-np.pi*x**2/4)/2
spacings = np.linspace(0, 4, 100)
p_s = goe_law(spacings)

plt.plot(spacings, p_s, label=r&#39;GOE analítico&#39;, c=&#39;orange&#39;, linestyle=&#39;--&#39;)
plt.plot(
    x_normal/mu_normal, 
    probs_normal*mu_normal, 
    linestyle=&#39;:&#39;,
    linewidth=2,
    zorder=1,
    label=&#39;normal&#39;, c=&#39;black&#39;)
plt.plot(x_laplace/mu_laplace, probs_laplace*mu_laplace, zorder=2,
linestyle=&#39;--&#39;, label=&#39;laplace&#39;, c=&#39;tomato&#39;)
plt.legend()
plt.savefig(&#39;RMT_diff_distribution.png&#39;, facecolor=&#39;w&#39;)
plt.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;RMT_diff_distribution.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;O que as distribuições acima dizem é que dado sua matriz ser $i.i.d.$ quadrada e simétrica então a probabilidade que você encontre dois autovalores iguais é $0$ (zero). Além do mais, existe um ponto de máximo global em relação a distribuição de espaçamentos. Esse comportamento que balanceia repulsão e atração dos autovalores lembra o comportamento de partículas em um fluído. Não é de espantar que o método matemático desenvolvido por Wigner para compreender tais matrizes foi denominado Gás de Coloumb[2].&lt;/p&gt;
&lt;p&gt;Agora que você tem pelo menos uma ideia do que seria essa repulsão para o caso que já abordamos (matrizes simétricas quadradas) voltemos ao problema dos números primos.&lt;/p&gt;
&lt;p&gt;O comando a seguir baixa os primeiros 100k zeros da função zeta&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!wget http://www.dtc.umn.edu/~odlyzko/zeta_tables/zeros1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Um pequeno preprocessamento dos dados:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;zeros = []
with open(&#39;zeros1&#39;, &#39;r&#39;) as f:
    for line in f.readlines():
        # remove all spaces in the line and convert it to a float
        zeros.append(float(line.replace(&#39; &#39;, &#39;&#39;)))
zeta_zeros = np.array(zeros)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Iremos calcular os espaçamentos entre os zeros, a  média de tais espaçamento e executar um KDE&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from KDEpy import FFTKDE

diff_zeta = np.diff(zeta_zeros[10000:])
m = np.mean(diff_zeta)
estimator = FFTKDE( bw=&#39;silverman&#39;).fit(diff_zeta)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x, probs = estimator.evaluate(100)
p = np.pi
goe_law = lambda x: p*x*np.exp(-p*x**2/4)/2
def gue(xs):
    arg = -4/np.pi*np.power(xs,2)
    vals = 32/np.pi**2*xs**2*np.exp(arg)
    return vals
spacings = np.linspace(0, 4, 100)
p_s = gue(spacings)
p_s2 = goe_law(spacings)
plt.plot(x/m, probs*m, label=&#39;zeros zeta&#39;, linestyle=&#39;--&#39;)
plt.plot(spacings, p_s, label=r&#39;GUE analítico&#39;, c=&#39;blue&#39;, linestyle=&#39;-.&#39;)
plt.plot(spacings, p_s2, label=r&#39;GOE analitico&#39;, c=&#39;orange&#39;, linestyle=&#39;-.&#39;)
plt.xlim(-0.1, 4)
plt.legend()
plt.savefig(&#39;zeta.png&#39;, facecolor=&#39;w&#39;)
plt.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;zeta.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Veja que a propriedade de repulsão apareceu novamente. Note que dentro do plot eu coloquei uma outra curva &lt;code&gt;GOE analítico&lt;/code&gt;, essa curva é aquela que melhor descreve a distribuição de espaçamentos quando suas matrizes aleatórias são simétricas. Isso é uma lição importante aqui e resalta o que eu já disse anteriormente. Não temos apenas &lt;em&gt;&amp;ldquo;um limite central para matrizes aleatórias&lt;/em&gt;&amp;rdquo;, mas todo um &lt;strong&gt;zoológico que mudará dependendo do tipo do seu problema.&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;3-usando-rmt-para-encontrar-e-filtrar-ruídos-em-matrizes&#34;&gt;3-Usando &lt;em&gt;RMT&lt;/em&gt; para encontrar e filtrar ruídos em matrizes&lt;/h1&gt;
&lt;p&gt;Na seção 1 relembramos o resultado do teorema central do limite. Na seção 2 foi mostrado que devemos ter em mente as simetrias e restrições do nosso problema para analisar qual regra de universalidade é respeitada. Isto é: a depender da simetria e restrições das nossas matrizes temos um outro &amp;ldquo;&lt;em&gt;timbre de universalidade&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Um exemplo de outro timbre surge no espectro de matrizes de correlação; matrizes que são comumente utilizadas para análise de carteiras de investimento. Tais matrizes tem &lt;strong&gt;pelo menos a seguinte estrutura&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$$
\mathbf C = \mathbf X \mathbf X^T
$$
onde $\mathbf X$ é uma matriz real $N\times M$ e $M&amp;gt;N$.&lt;/p&gt;
&lt;p&gt;O código abaixo permite explorar em um exemplo o espectro de matrizes aleatórias  $N\neq M$ com entradas dadas pela distribuição normal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_marchenko_bounds(Q, sigma=1):
    &amp;quot;&amp;quot;&amp;quot;Computes the Marchenko bounds for a given Q and sigma.

    Args:
        Q : (float) The Q-value.
        sigma : (float) The std value. 
    Returns:
        (float, float): The lower and upper bounds for the eigenvalues.

    &amp;quot;&amp;quot;&amp;quot;
    QiSqrt = np.sqrt(1/Q)
    lp = np.power(sigma*(1 + QiSqrt),2) 
    lm = np.power(sigma*(1 - QiSqrt),2) 
    return lp, lm

def marchenko_pastur(l, Q, sigma=1):
    &amp;quot;&amp;quot;&amp;quot;Return the probability of a Marchenko-Pastur distribution for 
    a given Q , sigma and eigenvalue.

    Args:
        l : (float) The eigenvalue.
        Q : (float) The Q-value.
        sigma : (float) The std value.
    Returns:
        (float): The probability
    &amp;quot;&amp;quot;&amp;quot;
    lp, lm = get_marchenko_bounds(Q, sigma)
    # outside the interval [lm, lp]
    if l &amp;gt; lp or l &amp;lt; lm:
        return 0
    return (Q/(2*np.pi*sigma*sigma*l))*np.sqrt((lp-l)*(l-lm))

def plot_marchenko_pastur(ax, eigen_values, Q, sigma=1, bins=100, just_the_bulk=False):
    &amp;quot;&amp;quot;&amp;quot;Plots the Marchenko-Pastur distribution for a given Q and sigma 
    
    Args:
        ax  : (matplotlib.axes) The axes to plot on.
        eigen_values : (np.array) The eigenvalues.
        Q  : (float) : The Q-value.
        sigma : (float) std
        bins : (int) The number of bins to use.
        just_the_bulk : (bool) If True, only the eigenvalues inside of 
            the Marchenko-Pastur bounds are plotted.

    &amp;quot;&amp;quot;&amp;quot;
    l_max, l_min = get_marchenko_bounds(Q, sigma)
    eigenvalues_points = np.linspace(l_min, l_max, 100)
    pdf = np.vectorize(lambda x : marchenko_pastur(x, Q, sigma))(eigenvalues_points)
    if just_the_bulk:
        eigen_values = eigen_values[ (eigen_values &amp;lt; l_max)]
    ax.plot(eigenvalues_points, pdf, color = &#39;r&#39;, label=&#39;Marchenko-Pastur&#39;)
    ax.hist(eigen_values,  label=&#39;sample&#39;, bins=bins , density=True)
    ax.set_xlabel(r&amp;quot;$\lambda$&amp;quot;)
    ax.set_ylabel(r&amp;quot;$\rho$&amp;quot;)
    ax.legend()

N = 1000
T = 4000
Q = T/N

X = np.random.normal(0,1,size=(N,T))
cor = np.corrcoef(X)
vals = np.linalg.eigh(cor)[0]

fig, ax = plt.subplots(1,1)
plot_marchenko_pastur(ax, vals, Q, sigma=1, bins=100)

plt.legend()
plt.savefig(&#39;Marchenko_Pastur.png&#39;, facecolor=&#39;w&#39;)
plt.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Marchenko_Pastur.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A função em vermelho na figura acima é a &lt;strong&gt;universalidade&lt;/strong&gt; que aparece em matrizes com a restrição $N\times M$ e entradas $i.i.d.$ e média $0$. Tal &lt;strong&gt;universalidade&lt;/strong&gt; tem como formato a distribuição de Marchenko-Pastur que é dada por&lt;/p&gt;
&lt;p&gt;$$
\rho (\lambda) = \frac{Q}{2\pi \sigma^2}\frac{\sqrt{(\lambda_{\max} - \lambda)(\lambda - \lambda_{\min})}}{\lambda}
$$
onde
$$
\lambda_{\max,\min} = \sigma^2(1 \pm \sqrt{\frac{1}{Q}})^2.
$$&lt;/p&gt;
&lt;p&gt;Note os parâmetros como $Q$ e $\sigma$. Tais  parâmetros precisam ser ajustados para obter um melhor fit com dados reais.&lt;/p&gt;
&lt;p&gt;Agora iremos para um caso real. Vamos usar dados obtidos via Yahoo Finance com a biblioteca &lt;code&gt;yfinance&lt;/code&gt; para consturir uma matriz de correlação com dados de ativos financeiros&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# você precisa desse pacote para baixar os dados
!pip install yfinance
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isso aqui é um post bem informal, então  peguei peguei uma lista aleatória com alguns tickers que encontrei na internet&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
!wget https://raw.githubusercontent.com/shilewenuw/get_all_tickers/master/get_all_tickers/tickers.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;selecionei apenas 500 para evitar que o processo de download seja muito demorado&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tickers = np.loadtxt(&#39;tickers.csv&#39;, dtype=str, delimiter=&#39;,&#39;).tolist()
tickers = np.random.choice(tickers, size=500, replace=False).tolist()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vamos baixar agora os dados em um periódo específico&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import yfinance as yf

df  = yf.download (tickers, 
                   start=&amp;quot;2017-01-01&amp;quot;, end=&amp;quot;2019-10-01&amp;quot;,
                   interval = &amp;quot;1d&amp;quot;,
                   group_by = &#39;ticker&#39;,
                   progress = True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o  &lt;code&gt;yfinance&lt;/code&gt; vai gerar um dataframe com multiindex, então precisamos separar da
forma que queremos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
tickers_available = list(set([ ticket for ticket, _ in df.columns.T.to_numpy()]))
prices = pd.DataFrame()
for ticker in tickers_available:
    try:
        prices[ticker] = df[(ticker, &#39;Adj Close&#39;)]
    except KeyError:
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora iremos calcular o retorno. Aqui entra um ponto delicado. Você poderá achar alguns posts na internet ou mesmo artigos argumentando que é necessário calcular o retorno como
$\log (r+1)$ pois assim as entradas da sua matriz seguirá uma distribuição normal o que permitirá a aplicação de RMT. Já vimos no presente texto que não precisamos que as entradas da matrizes venham de uma distribuição normal para que a &lt;strong&gt;universalidade&lt;/strong&gt; apareça. A  escolha ou não de usar $\log$ nos retornos merece mais atenção, inclusive com críticas em relação ao uso[6, 7, 8]. Mas esse  post não pretende te vender nada, por isso vou ficar com o mais simples.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# calculamos os retornos
returns_all = prices.pct_change()

# a primeira linha não faz sentido, não existe retorno no primeiro dia
returns_all = returns_all.iloc[1:, :]

# vamos limpar todas as linhas se mnegociação e dropar qualquer coluna com muitos NaN
returns_all.dropna(axis = 1, thresh=len(returns_all.index)/2, inplace=True)
returns_all.dropna(axis = 0, inplace=True)
# seleciona apenas 150 colunas 
returns_all = returns_all[np.random.choice(returns_all.columns, size=120, replace=False)]
#returns_all = returns_all.iloc[150:]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com o &lt;code&gt;df&lt;/code&gt; pronto calcularemos a matriz de correlação e seus autovalores&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;correlation_matrix = returns_all.interpolate().corr()
vals = np.linalg.eigh(correlation_matrix.values)[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos usar os parâmetros padrões para $Q$ e $\sigma$ e torcer para que funcione&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
T, N = returns_all.shape
Q=T/N
sigma= 1

fig, ax = plt.subplots(1,1)
plot_marchenko_pastur(ax, vals, Q, sigma=1, bins=200, just_the_bulk=False)

plt.legend()
plt.savefig(&#39;Marchenko_Pastur_all.png&#39;, facecolor=&#39;w&#39;)
plt.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Marchenko_Pastur_all.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Usando todo o intervalo de tempo do nosso &lt;code&gt;df&lt;/code&gt; obtivemos o que parece um ajuste razoável. É claro que você poderia (deveria) rodar algum teste estatistico para verificar tal ajuste.
Existem alguns trabalhos que fizeram essa análise de forma rigorosa, comparando mercados e periódos específicos em relação a distribuição de Marchenko-Pastur[9].&lt;/p&gt;
&lt;p&gt;Se você for uma pessoa atenta notará que na imagem acima existem alguns autovalores fora do suporte da Marchenko-Pastur.  A ideia de filtragem via RMT é como dito em [9] testar seus dados em relação a &amp;ldquo;&lt;em&gt;hipótese nula&lt;/em&gt;&amp;rdquo; da RMT. No caso se seus autovalores estão dentro do &lt;em&gt;bulk&lt;/em&gt; da distribuição que descreve um modelo de entradas &lt;em&gt;i.i.d.&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Como isso foi aplicado em alguns trabalhos? Vamos ver na prática.&lt;/p&gt;
&lt;p&gt;Usaremos $70$% da série histórica para calcular uma nova matriz de correlação. Com a matriz de correlação em mãos vamos computar os autovalores e autovetores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# iremos usar 70% da serie para realizar a filtragem
returns_all.shape[0]*0.70
n_days = returns_all.shape[0]
n_days_in = int(n_days*(1-0.70))


returns = returns_all.copy()
sample = returns.iloc[:(returns.shape[0]-n_days_in), :].copy()

correlation_matrix = sample.interpolate().corr()
vals, vecs = np.linalg.eigh(correlation_matrix.values)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Os autovalores e autovetores podem ser compreendidos como a decomposição de uma dada matriz.
Portanto, o seguinte teste precisa passar&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; assert np.abs(
    np.dot(vecs, np.dot(np.diag(vals), np.transpose(vecs))).flatten()
    - correlation_matrix.values.flatten()
 ).max() &amp;lt; 1e-10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A distribuição de Marchenko-Pastur serve como um indicativo para nossa filtragem. O que faremos é jogar fora todos os autovalores
que estão dentro da distribuição de Marchenko-Pastur, posteriormente reconstruiremos a matriz de correlação.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;T, N = returns.shape
Q=T/N
sigma = 1
lp, lm = get_marchenko_bounds(Q, sigma)

# Filter the eigenvalues out
vals[vals &amp;lt;= lp ] = 0
# Reconstruct the matrix
filtered_matrix =  np.dot(vecs, np.dot(np.diag(vals), np.transpose(vecs)))
np.fill_diagonal(filtered_matrix, 1)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com a matriz de correlação filtrada  você pode fazer o que bem entender com ela - existem outras maneiras de se realizar uma filtragem  - uma das possíveis aplicações que precisa ser utilizada com cuidado é usar tal matriz filtrada como input para algoritmos de otimização de carteira. Talvez faça um outro post descrevendo essa otimização de forma mais clara, mas esse não é meu enfoque nesse post e nem minha especialidade. Portanto, se você quiser dar uma lida recomendo os seguintes posts: [17, 18]&lt;/p&gt;
&lt;p&gt;O que você precisa saber é que uma matriz de covariância, $\mathbf C_\sigma$, adimite uma decomposição em relação a matriz de correlação atráves da seguinte forma&lt;/p&gt;
&lt;p&gt;$$
\mathbf C_\sigma = \mathbf D^{-1/2} \mathbf C \mathbf D^{-1/2}
$$
onde $\mathbf D^{-1/2}$ é uma matriz diagonal com as entradas sendo os desvios padrão para cada serie de dados, isto é&lt;br&gt;
$$
\begin{bmatrix}
\sigma_{1} &amp;amp;0 &amp;amp;\cdots &amp;amp;0 \\
0 &amp;amp;\sigma_{2} &amp;amp;\cdots &amp;amp;0 \\
\vdots &amp;amp;\vdots &amp;amp;\ddots &amp;amp;\vdots \\
0 &amp;amp;0 &amp;amp;\cdots &amp;amp;\sigma_{M} \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Discutimos uma maneira de obter uma matriz de correlação filtrada, $\mathbf{\tilde C}$,  através de RMT,
a ideia  é plugar essa nova matriz na equação anterior e obter uma nova matriz de covariância onde as informações menos relevantes foram eliminadas.&lt;/p&gt;
&lt;p&gt;$$
\mathbf{\tilde  C_\sigma} = \mathbf D^{-1/2} \mathbf{\tilde C} \mathbf D^{-1/2}.
$$&lt;/p&gt;
&lt;p&gt;Tendo essa nova matriz de covâriancia filtrada agora basta você ingerir ela em algum método preferido para otimização e comparar com o resultado obtido usando a matriz original.  Aqui usaremos o clássico Markowitz&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Reconstruct the filtered covariance matrix
covariance_matrix = sample.cov()
inv_cov_mat = np.linalg.pinv(covariance_matrix)

# Construct minimum variance weights
ones = np.ones(len(inv_cov_mat))
inv_dot_ones = np.dot(inv_cov_mat, ones)
min_var_weights = inv_dot_ones/ np.dot( inv_dot_ones , ones)



variances = np.diag(sample.cov().values)
standard_deviations = np.sqrt(variances) 

D = np.diag(standard_deviations)
filtered_cov = np.dot(D ,np.dot(filtered_matrix,D))
filtered_cov = filtered_matrix

filtered_cov = (np.dot(np.diag(standard_deviations), 
            np.dot(filtered_matrix,np.diag(standard_deviations))))

filt_inv_cov = np.linalg.pinv(filtered_cov)

# Construct minimum variance weights
ones = np.ones(len(filt_inv_cov))
inv_dot_ones = np.dot(filt_inv_cov, ones)
filt_min_var_weights = inv_dot_ones/ np.dot( inv_dot_ones , ones)
def get_cumulative_returns_over_time(sample, weights):
    weights[weights &amp;lt;= 0 ] = 0 
    weights = weights / weights.sum()
    return (((1+sample).cumprod(axis=0))-1).dot(weights)
    
cumulative_returns = get_cumulative_returns_over_time(returns, min_var_weights).values
cumulative_returns_filt = get_cumulative_returns_over_time(returns, filt_min_var_weights).values



&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
in_sample_ind = np.arange(0, (returns.shape[0]-n_days_in+1))
out_sample_ind = np.arange((returns.shape[0]-n_days_in), returns.shape[0])
f = plt.figure()

ax = plt.subplot(111)
points = np.arange(0, len(cumulative_returns))[out_sample_ind]
ax.plot(points, cumulative_returns[out_sample_ind], &#39;orange&#39;, linestyle=&#39;--&#39;, label=&#39;original&#39;)

ax.plot(points, cumulative_returns_filt[out_sample_ind], &#39;b&#39;, linestyle=&#39;-.&#39;, label=&#39;filtrado&#39;)
ymax = max(cumulative_returns[out_sample_ind].max(), cumulative_returns_filt[out_sample_ind].max())
ymin = min(cumulative_returns[out_sample_ind].min(), cumulative_returns_filt[out_sample_ind].min())
plt.legend()
plt.savefig(&#39;comp.png&#39;, facecolor=&#39;w&#39;)
plt.close()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;comp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Obtivemos uma melhora, mas novamente ressaltamos que uma analise mais criteriosa deveria ter sido feita. Vamos listar alguns pontos&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Em relação a questão da escolha do intervalo de tempo. Isto é, se o tamanho foi pequeno de mais para capturar a correlação ou se foi grande de mais tal que as correlações entre ativos não são estacionárias.&lt;/li&gt;
&lt;li&gt;O (não) uso do  $\log$-retorno e seu impacto&lt;/li&gt;
&lt;li&gt;Uma escolha não aleatória do que seria analisado&lt;/li&gt;
&lt;li&gt;Métodos de unfolding dos autovalores (tema para outro post)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5---vantagens-críticas-e-sugestões&#34;&gt;5 - Vantagens, críticas e sugestões&lt;/h1&gt;
&lt;p&gt;Você poderá encontrar alguns trabalhos e posts descrevendo o uso de matrizes aleatórias para filtragem de matrizes de correlação sem uma boa crítica ou explicitação das limitações vou linkar aqui alguns pontos positivos e negativos e limitações&lt;/p&gt;
&lt;h2 id=&#34;onde-realmente-rmt-se-mostrou-útil&#34;&gt;Onde realmente RMT se mostrou útil&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Obviamente a RMT é indiscutivelmente bem sucedida na matemática e física permitindo compreender sistemas apenas analisando a estatística dos &lt;em&gt;gases matriciais&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Em machine learning a RMT também está provando ser uma ferramenta útil para compreender e melhorar o processo de aprendizado [15].&lt;/li&gt;
&lt;li&gt;Entender comportamentos de sistemas sociais, biológicos e econômicos. Aqui com entender o comportamento digo apenas saber se um dado segue uma característica dada por alguma lei específica como a lei de semicírculo. Isto é, não existe discussão em você pegar um dado sistema que é representado por uma matriz, estudar o comportamento do seu espectro de autovalores e autovetores e verificar que seguem algumas lei de universalidade. &lt;strong&gt;Isso é bem diferente de dizer que se você filtrar uma matriz de correlação via RMT você irá obter sempre resultados melhores.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;limitações&#34;&gt;Limitações&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Note que não realizamos nenhum tipo de teste para decidir se realmente a distribuição de autovalores era a distribuição desejada. Baseamos isso só no olhometro, obviamente não é uma boa ideia.&lt;/li&gt;
&lt;li&gt;A filtragem apenas removendo os autovalores apesar de simples é limitada e pode ser contra produtiva, outros métodos de filtragem podem ser inclusive melhores[14]. Inclusive não é uma das únicas aplicações de RMT para tratamento desse tipo de dado [16]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;para-conhecer-mais&#34;&gt;Para conhecer mais&lt;/h2&gt;
&lt;h3 id=&#34;ciêntistas&#34;&gt;Ciêntistas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Alguns grandes nomes de RMT: Madan Lal Mehta, Freeman Dyson e Terrence Tao&lt;/li&gt;
&lt;li&gt;Alguns brasileiros: Marcel Novaes autor do livro 
&lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-319-70885-0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to Random Matrices - Theory and Practice&lt;/a&gt;-
&lt;a href=&#34;https://arxiv.org/abs/1712.07903&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;arxiv&lt;/a&gt;; Fernando Lucas Metz trabalhou com o Nobel Giorgio Parisi.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;encontrou-um-erro-ou-quer-melhorar-esse-texto&#34;&gt;Encontrou um erro ou quer melhorar esse texto?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Faça sua contribuição   criando uma 
&lt;a href=&#34;https://github.com/devmessias/devmessias.github.io/issues/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue&lt;/a&gt; ou um PR editando esse arquivo aqui 
&lt;a href=&#34;https://github.com/devmessias/devmessias.github.io/blob/master/content/post/random_matrix_theory/index.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;random_matrix_theory/index.md&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-referências&#34;&gt;6-Referências&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[1] M. Kac, “Can One Hear the Shape of a Drum?,” The American Mathematical Monthly, vol. 73, no. 4, p. 1, Apr. 1966, doi: 10.2307/2313748.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[2] Wigner, E.P., 1957. Statistical properties of real symmetric matrices with many dimensions (pp. 174-184). Princeton University.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[4] “From Prime Numbers to Nuclear Physics and Beyond,” Institute for Advanced Study. 
&lt;a href=&#34;https://www.ias.edu/ideas/2013/primes-random-matrices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.ias.edu/ideas/2013/primes-random-matrices&lt;/a&gt; (accessed Sep. 30, 2020).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[5] “GUE hypothesis,” What’s new. 
&lt;a href=&#34;https://terrytao.wordpress.com/tag/gue-hypothesis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://terrytao.wordpress.com/tag/gue-hypothesis/&lt;/a&gt; (accessed Nov. 22, 2021).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[6] R. Hudson and A. Gregoriou, “Calculating and Comparing Security Returns is Harder than you Think: A Comparison between Logarithmic and Simple Returns,” Social Science Research Network, Rochester, NY, SSRN Scholarly Paper ID 1549328, Feb. 2010. doi: 10.2139/ssrn.1549328.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[7] A. Meucci, “Quant Nugget 2: Linear vs. Compounded Returns – Common Pitfalls in Portfolio Management,” Social Science Research Network, Rochester, NY, SSRN Scholarly Paper ID 1586656, May 2010. Accessed: Dec. 01, 2021. [Online]. Available: 
&lt;a href=&#34;https://papers.ssrn.com/abstract=1586656&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://papers.ssrn.com/abstract=1586656&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[8] Lidian, “Analysis on Stocks: Log(1+return) or Simple Return?,” Medium, Sep. 18, 2020. 
&lt;a href=&#34;https://medium.com/@huangchingchiu/analysis-on-stocks-log-1-return-or-simple-return-371c3f60fab2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/@huangchingchiu/analysis-on-stocks-log-1-return-or-simple-return-371c3f60fab2&lt;/a&gt; (accessed Nov. 25, 2021).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[9] N. A. Eterovic and D. S. Eterovic, “Separating the Wheat from the Chaff: Understanding Portfolio Returns in an Emerging Market,” Social Science Research Network, Rochester, NY, SSRN Scholarly Paper ID 2161646, Oct. 2012. doi: 10.2139/ssrn.2161646.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[10] E. P. Wigner, “Characteristic Vectors of Bordered Matrices With Infinite Dimensions,” Annals of Mathematics, vol. 62, no. 3, pp. 548–564, 1955, doi: 10.2307/1970079.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[11] E. P. Wigner, “On the statistical distribution of the widths and spacings of nuclear resonance levels,” Mathematical Proceedings of the Cambridge Philosophical Society, vol. 47, no. 4, pp. 790–798, Oct. 1951, doi: 10.1017/S0305004100027237.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[13] F. W. K. Firk and S. J. Miller, “Nuclei, Primes and the Random Matrix Connection,” Symmetry, vol. 1, no. 1, pp. 64–105, Sep. 2009, doi: 10.3390/sym1010064.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[14] L. Sandoval, A. B. Bortoluzzo, and M. K. Venezuela, “Not all that glitters is RMT in the forecasting of risk of portfolios in the Brazilian stock market,” Physica A: Statistical Mechanics and its Applications, vol. 410, pp. 94–109, Sep. 2014, doi: 10.1016/j.physa.2014.05.006.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[15] M. E. A. Seddik, C. Louart, M. Tamaazousti, and R. Couillet, “Random Matrix Theory Proves that Deep Learning Representations of GAN-data Behave as Gaussian Mixtures,” arXiv:2001.08370 [cs, stat], Jan. 2020, Accessed: Dec. 05, 2021. [Online]. Available: 
&lt;a href=&#34;http://arxiv.org/abs/2001.08370&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://arxiv.org/abs/2001.08370&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[16] D. B. Aires, “Análise de crises financeiras brasileiras usando teoria das matrizes aleatórias,” Universidade Estadual Paulista (Unesp), 2021. Accessed: Dec. 05, 2021. [Online]. Available: 
&lt;a href=&#34;https://repositorio.unesp.br/handle/11449/204550&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://repositorio.unesp.br/handle/11449/204550&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[17] S. Rome, “Eigen-vesting II. Optimize Your Portfolio With Optimization,” Scott Rome, Mar. 22, 2016. 
&lt;a href=&#34;http://srome.github.io//Eigenvesting-II-Optimize-Your-Portfolio-With-Optimization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://srome.github.io//Eigenvesting-II-Optimize-Your-Portfolio-With-Optimization/&lt;/a&gt; (accessed Dec. 05, 2021).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[18] “11.1 Portfolio Optimization — MOSEK Fusion API for Python 9.3.10.” 
&lt;a href=&#34;https://docs.mosek.com/latest/pythonfusion/case-studies-portfolio.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.mosek.com/latest/pythonfusion/case-studies-portfolio.html&lt;/a&gt; (accessed Dec. 05, 2021).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Helios: graph layout viz and streaming</title>
      <link>/project/helios/</link>
      <pubDate>Mon, 13 Sep 2021 17:43:22 +0000</pubDate>
      <guid>/project/helios/</guid>
      <description>&lt;a href=&#34;https://github.com/fury-gl/helios&#34;&gt;
Helios repo
&lt;/a&gt;
&lt;p&gt;Helios is a Python library aiming to provide an easy way to visualize huge networks dynamically. Helios also provides visualizations through an interactive Stadia-like streaming system in which users can be collaboratively access (and share) visualizations created in a server or through Jupyter Notebook/Lab environments. It incorporates state-of-the-art layout algorithms and optimized rendering techniques (powered by 
&lt;a href=&#34;https://github.com/fury-gl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FURY&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6979335/125310065-a3a9f480-e308-11eb-98d9-0ff5406a0e96.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6979335/126175583-c7d85f0a-3d0c-400e-bbdd-4cbcd2a36fed.gif&#34; alt=&#34;...&#34; height=&#34;300&#34;/&gt;&lt;/center&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;a href=&#34;#general-information&#34;&gt;General Information&lt;/a&gt; •
  &lt;a href=&#34;#key-features&#34;&gt;Key Features&lt;/a&gt; •
  &lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt; •
  &lt;a href=&#34;#how-to-use&#34;&gt;Usage&lt;/a&gt; •
  &lt;a href=&#34;#history&#34;&gt;History&lt;/a&gt; •
  &lt;a href=&#34;#credits&#34;&gt;Credits&lt;/a&gt; 
&lt;/p&gt;
&lt;h1 id=&#34;general-information&#34;&gt;General Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Website and Documentation:&lt;/strong&gt;  
&lt;a href=&#34;https://heliosnetwork.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heliosnetwork.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Examples:&lt;/strong&gt; 
&lt;a href=&#34;https://heliosnetwork.io/examples_gallery/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heliosnetwork.io/examples_gallery/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blog:&lt;/strong&gt;  
&lt;a href=&#34;https://heliosnetwork.io/blog.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heliosnetwork.io/blog.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Free software:&lt;/strong&gt; MIT license&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community:&lt;/strong&gt; Come to chat on 
&lt;a href=&#34;https://discord.gg/6btFPPj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;key-features&#34;&gt;Key Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Force-directed layout using octrees&lt;/li&gt;
&lt;li&gt;Minimum-distortion embeddings&lt;/li&gt;
&lt;li&gt;ForceAtlas2 using cugraph&lt;/li&gt;
&lt;li&gt;Interactive local and Remote rendering in Jupyter Notebooks&lt;/li&gt;
&lt;li&gt;WebRTC or MJPEG interactive streaming system&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;
&lt;p&gt;Use pip install pointed to this repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip git+https://github.com/fury-gl/helios.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an alternative, Helios can be installed from the source code through the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Get the latest source by cloning this repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/fury-gl/helios.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Install requirements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Install Helios&lt;/p&gt;
&lt;p&gt;As a 
&lt;a href=&#34;https://pip.pypa.io/en/stable/reference/pip_install/#id44&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;local project installation&lt;/a&gt; using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pip install .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or as an 
&lt;a href=&#34;https://pip.pypa.io/en/stable/reference/pip_install/#id44&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;editable&amp;rdquo; installation&lt;/a&gt; using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pip install -e .
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Enjoy!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, see also 
&lt;a href=&#34;https://heliosnetwork.io/latest/installation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;installation page on heliosnetwork.io&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;Helios requires Python 3.7+ and the following mandatory dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;numpy &amp;gt;= 1.7.1&lt;/li&gt;
&lt;li&gt;vtk &amp;gt;= 8.1.0&lt;/li&gt;
&lt;li&gt;fury&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To enable WebRTC streaming and enable optimizations to the streaming system, install the following optional packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Required for WebRTC streaming&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aiohttp&lt;/li&gt;
&lt;li&gt;aiortc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional packages that may improve performance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cython&lt;/li&gt;
&lt;li&gt;opencv&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;After installation, you can install test suite requirements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install -r requirements_dev.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to launch test suite:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pytest -svv helios
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;
&lt;p&gt;There are many ways to start using Helios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to 
&lt;a href=&#34;https://heliosnetwork.io/getting_started.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Explore our 
&lt;a href=&#34;https://heliosnetwork.io/examples_gallery/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Examples&lt;/a&gt; or 
&lt;a href=&#34;https://heliosnetwork.io/latest/auto_examples/index.htmlhttps://heliosnetwork.io/api.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   from helios import NetworkDraw
   from helios.layouts import HeliosFr
   import numpy as np
   
   vertex_count = 8
   
   edges = np.array([
      [0,1],
      [0,2],
      [1,2],
      [2,3],
      [3,4],
      [3,5],
      [4,5],
      [5,6],
      [6,7],
      [7,0]
   ]);
   
  centers = np.random.normal(size=(vertex_count, 3))

  network_draw = NetworkDraw(
          positions=centers,
          edges=edges,
          colors=(0.25,0.25,0.25),
          scales=1,
          node_edge_width=0,
          marker=&#39;s&#39;,
          edge_line_color=(0.5,0.5,0.5),
          window_size=(600, 600)
  )
  
  layout = HeliosFr(edges, network_draw)
  layout.start()
  network_draw.showm.initialize()
  network_draw.showm.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;
&lt;p&gt;Helios project started as a replacement to the desktop version of the 
&lt;a href=&#34;https://filipinascimento.github.io/networks3d/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Networks 3D&lt;/a&gt; tools. The project evolved quickly along the summer of 2021 due to the GSoC’21 under the responsibility of the Python Software Foundation and the FURY team. The majority of the initial work has been done by 
&lt;a href=&#34;https://github.com/devmessias&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@devmessias&lt;/a&gt; mentored by 
&lt;a href=&#34;https://github.com/filipinascimento&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@filipinascimento&lt;/a&gt; and 
&lt;a href=&#34;https://github.com/skoudoro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@skoudoro&lt;/a&gt;. The GSoC’21 project associated with Helios is “A system for collaborative visualization of large network layouts using FURY”. Check out the 
&lt;a href=&#34;https://gist.github.com/devmessias/1cb802efb0a094686c129259498710b3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;final report&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>eMaTe</title>
      <link>/project/emate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/project/emate/</guid>
      <description>&lt;p&gt;eMaTe it is a python package which the main goal is to provide  methods capable of estimating the spectral densities and trace
functions of large sparse matrices. eMaTe can run in both CPU and GPU and can estimate the spectral density and related trace functions, such as entropy and Estrada index, even in directed or undirected networks with million of nodes.&lt;/p&gt;
&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pip install emate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you a have a GPU you should also install cupy.&lt;/p&gt;
&lt;h2 id=&#34;kernel-polynomial-method-kpm&#34;&gt;Kernel Polynomial Method (KPM)&lt;/h2&gt;
&lt;p&gt;The Kernel Polynomial Method can estimate the spectral density of large sparse Hermitan matrices with a computational cost almost linear. This method combines three key ingredients: the Chebyshev expansion + the stochastic trace estimator + kernel smoothing.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import networkx as nx
import numpy as np

n = 3000
g = nx.erdos_renyi_graph(n , 3/n)
W = nx.adjacency_matrix(g)

vals  = np.linalg.eigvals(W.todense()).real
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from emate.hermitian import tfkpm


num_moments = 40
num_vecs = 40
extra_points = 10
ek, rho = tfkpm(W, num_moments, num_vecs, extra_points)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
plt.hist(vals, density=True, bins=100, alpha=.9, color=&amp;quot;steelblue&amp;quot;)
plt.scatter(ek, rho, c=&amp;quot;tomato&amp;quot;, zorder=999, alpha=0.9, marker=&amp;quot;d&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the CUPY package it is available in your machine, you can also use the cupy implementation. When compared to tf-kpm, the
Cupy-kpm is slower for median matrices (100k) and faster for larger matrices (&amp;gt; 10^6). The main reason it&amp;rsquo;s because the tf-kpm was implemented in order to calc all te moments in a single step.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
from emate.hermitian import cupykpm

num_moments = 40
num_vecs = 40
extra_points = 10
ek, rho = cupykpm(W.tocsr(), num_moments, num_vecs, extra_points)
plt.hist(vals, density=True, bins=100, alpha=.9, color=&amp;quot;steelblue&amp;quot;)
plt.scatter(ek.get(), rho.get(), c=&amp;quot;tomato&amp;quot;, zorder=999, alpha=0.9, marker=&amp;quot;d&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;docs/source/imgs/kpm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stochastic-lanczos-quadrature-slq&#34;&gt;Stochastic Lanczos Quadrature (SLQ)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem of estimating the trace of matrix functions appears in applications ranging from machine learning and scientific computing, to computational biology.[2]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;example-1&#34;&gt;Example&lt;/h3&gt;
&lt;h4 id=&#34;computing-the-estrada-index&#34;&gt;Computing the Estrada index&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from emate.symmetric.slq import pyslq
import tensorflow as tf

def trace_function(eig_vals):
    return tf.exp(eig_vals)

num_vecs = 100
num_steps = 50
approximated_estrada_index, _ = pyslq(L_sparse, num_vecs, num_steps,  trace_function)
exact_estrada_index =  np.sum(np.exp(vals_laplacian))
approximated_estrada_index, exact_estrada_index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code returns&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(3058.012, 3063.16457163222)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;entropy&#34;&gt;Entropy&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import scipy
import scipy.sparse

def entropy(eig_vals):
  s = 0.
  for val in eig_vals:
    if val &amp;gt; 0:
      s += -val*np.log(val)
  return s

L = np.array(G.laplacian(normalized=True), dtype=np.float64)
vals_laplacian = np.linalg.eigvalsh(L).real

exact_entropy =  entropy(vals_laplacian)


def trace_function(eig_vals):
  def entropy(val):
    return tf.cond(val&amp;gt;0, lambda:-val*tf.log(val), lambda: 0.)
  
  return tf.map_fn(entropy, eig_vals)
 
L_sparse = scipy.sparse.coo_matrix(L)
    
num_vecs = 100
num_steps = 50
approximated_entropy, _ = pyslq(L_sparse, num_vecs, num_steps,  trace_function)

approximated_entropy, exact_entropy
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(-509.46283, -512.5283224633046)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.tandfonline.com/doi/abs/10.1080/03610919008812866&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[1] Hutchinson, M. F. (1990). A stochastic estimator of the trace of the influence matrix for laplacian smoothing splines. Communications in Statistics-Simulation and Computation, 19(2), 433-450.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://epubs.siam.org/doi/abs/10.1137/16M1104974&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[2] Ubaru, S., Chen, J., &amp;amp; Saad, Y. (2017). Fast Estimation of tr(f(A)) via Stochastic Lanczos Quadrature. SIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;&#34;&gt;[3] The Kernel Polynomial Method applied to
tight binding systems with
time-dependence&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
